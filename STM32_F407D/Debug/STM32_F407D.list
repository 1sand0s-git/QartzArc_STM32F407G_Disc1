
STM32_F407D.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ca0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001e28  08001e28  00011e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e38  08001e38  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08001e38  08001e38  00011e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001e40  08001e40  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e40  08001e40  00011e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001e44  08001e44  00011e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08001e48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000050  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000c0  200000c0  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_line   0000788f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00007137  00000000  00000000  0002792f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001a6f  00000000  00000000  0002ea66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000005b8  00000000  00000000  000304d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000e389e  00000000  00000000  00030a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 000004f0  00000000  00000000  00114330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00025e70  00000000  00000000  00114820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013a690  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001870  00000000  00000000  0013a6e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001e10 	.word	0x08001e10

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08001e10 	.word	0x08001e10

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80004c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80004f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80004c4:	480d      	ldr	r0, [pc, #52]	; (80004fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80004c6:	490e      	ldr	r1, [pc, #56]	; (8000500 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80004c8:	4a0e      	ldr	r2, [pc, #56]	; (8000504 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80004ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004cc:	e002      	b.n	80004d4 <LoopCopyDataInit>

080004ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004d2:	3304      	adds	r3, #4

080004d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004d8:	d3f9      	bcc.n	80004ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004da:	4a0b      	ldr	r2, [pc, #44]	; (8000508 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80004dc:	4c0b      	ldr	r4, [pc, #44]	; (800050c <LoopFillZerobss+0x26>)
  movs r3, #0
 80004de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004e0:	e001      	b.n	80004e6 <LoopFillZerobss>

080004e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004e4:	3204      	adds	r2, #4

080004e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004e8:	d3fb      	bcc.n	80004e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80004ea:	f000 fac7 	bl	8000a7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004ee:	f001 fb9f 	bl	8001c30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80004f2:	f000 f9db 	bl	80008ac <main>
  bx  lr    
 80004f6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80004f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000500:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000504:	08001e48 	.word	0x08001e48
  ldr r2, =_sbss
 8000508:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800050c:	200000c0 	.word	0x200000c0

08000510 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000510:	e7fe      	b.n	8000510 <ADC_IRQHandler>
	...

08000514 <_Z16SystemInitializev>:
//
//Used to initialize CPU caches, NVIC and SysTick, as well as oscillators, PLLs, system clocks, bus clocks and some peripheral clocks.
//Also enables all GPIOs
//
//Returns QA_OK if successful, or QA_Fail if initialized failed
QA_Result SystemInitialize(void) {
 8000514:	b580      	push	{r7, lr}
 8000516:	b0a0      	sub	sp, #128	; 0x80
 8000518:	af00      	add	r7, sp, #0

	//-----------------------
	//Enable Cache & Prefetch
	__HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800051a:	4b8e      	ldr	r3, [pc, #568]	; (8000754 <_Z16SystemInitializev+0x240>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4a8d      	ldr	r2, [pc, #564]	; (8000754 <_Z16SystemInitializev+0x240>)
 8000520:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000524:	6013      	str	r3, [r2, #0]
	__HAL_FLASH_DATA_CACHE_ENABLE();
 8000526:	4b8b      	ldr	r3, [pc, #556]	; (8000754 <_Z16SystemInitializev+0x240>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	4a8a      	ldr	r2, [pc, #552]	; (8000754 <_Z16SystemInitializev+0x240>)
 800052c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000530:	6013      	str	r3, [r2, #0]
	__HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000532:	4b88      	ldr	r3, [pc, #544]	; (8000754 <_Z16SystemInitializev+0x240>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	4a87      	ldr	r2, [pc, #540]	; (8000754 <_Z16SystemInitializev+0x240>)
 8000538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800053c:	6013      	str	r3, [r2, #0]


	//--------------------------
	//Set NVIC Priority Grouping
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800053e:	2003      	movs	r0, #3
 8000540:	f000 fbb0 	bl	8000ca4 <HAL_NVIC_SetPriorityGrouping>


	//------------
	//Init SysTick
	if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000544:	2000      	movs	r0, #0
 8000546:	f000 faab 	bl	8000aa0 <HAL_InitTick>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	bf14      	ite	ne
 8000550:	2301      	movne	r3, #1
 8000552:	2300      	moveq	r3, #0
 8000554:	b2db      	uxtb	r3, r3
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <_Z16SystemInitializev+0x4a>
		return QA_Fail;
 800055a:	2301      	movs	r3, #1
 800055c:	e0f6      	b.n	800074c <_Z16SystemInitializev+0x238>


	//-------------------------
	//Setup Power Configuration
	__HAL_RCC_PWR_CLK_ENABLE();
 800055e:	2300      	movs	r3, #0
 8000560:	62bb      	str	r3, [r7, #40]	; 0x28
 8000562:	4b7d      	ldr	r3, [pc, #500]	; (8000758 <_Z16SystemInitializev+0x244>)
 8000564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000566:	4a7c      	ldr	r2, [pc, #496]	; (8000758 <_Z16SystemInitializev+0x244>)
 8000568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056c:	6413      	str	r3, [r2, #64]	; 0x40
 800056e:	4b7a      	ldr	r3, [pc, #488]	; (8000758 <_Z16SystemInitializev+0x244>)
 8000570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000576:	62bb      	str	r3, [r7, #40]	; 0x28
 8000578:	6abb      	ldr	r3, [r7, #40]	; 0x28
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800057a:	2300      	movs	r3, #0
 800057c:	627b      	str	r3, [r7, #36]	; 0x24
 800057e:	4b77      	ldr	r3, [pc, #476]	; (800075c <_Z16SystemInitializev+0x248>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4a76      	ldr	r2, [pc, #472]	; (800075c <_Z16SystemInitializev+0x248>)
 8000584:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000588:	6013      	str	r3, [r2, #0]
 800058a:	4b74      	ldr	r3, [pc, #464]	; (800075c <_Z16SystemInitializev+0x248>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000592:	627b      	str	r3, [r7, #36]	; 0x24
 8000594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	//---------------------
	//Configure Oscillators
	//
	//Configure High Speed External (HSE) oscillator to be used, and setup primary PLL to provide a 168MHz clock
	//NOTE: HSE Oscillator provided on STM32F407G-DISC1 board is an 8MHz clock signal provided by the ST-Link MCU's Master Clock Output
	RCC_OscInitTypeDef RCC_OscInit = {0};
 8000596:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800059a:	2230      	movs	r2, #48	; 0x30
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f001 fb72 	bl	8001c88 <memset>
	RCC_OscInit.OscillatorType = RCC_OSCILLATORTYPE_HSE; //Define which oscillator is to be configured
 80005a4:	2301      	movs	r3, #1
 80005a6:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInit.HSEState       = RCC_HSE_BYPASS;         //Set High Speed External oscillator as system clock
 80005a8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005ac:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInit.PLL.PLLState   = RCC_PLL_ON;             //Enable primary PLL
 80005ae:	2302      	movs	r3, #2
 80005b0:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInit.PLL.PLLSource  = RCC_PLLSOURCE_HSE;      //Set High Speed External oscillator as PLL input clock
 80005b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005b6:	66fb      	str	r3, [r7, #108]	; 0x6c

	  //Set PLL values required for 168MHz system clock
	RCC_OscInit.PLL.PLLM       = 8;
 80005b8:	2308      	movs	r3, #8
 80005ba:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInit.PLL.PLLN       = 336;
 80005bc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005c0:	677b      	str	r3, [r7, #116]	; 0x74
	RCC_OscInit.PLL.PLLP       = RCC_PLLP_DIV2;
 80005c2:	2302      	movs	r3, #2
 80005c4:	67bb      	str	r3, [r7, #120]	; 0x78
	RCC_OscInit.PLL.PLLQ       = 7;
 80005c6:	2307      	movs	r3, #7
 80005c8:	67fb      	str	r3, [r7, #124]	; 0x7c

	if (HAL_RCC_OscConfig(&RCC_OscInit) != HAL_OK) {     //Initialize Oscillators using values in init structure
 80005ca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80005ce:	4618      	mov	r0, r3
 80005d0:	f000 fd5e 	bl	8001090 <HAL_RCC_OscConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	bf14      	ite	ne
 80005da:	2301      	movne	r3, #1
 80005dc:	2300      	moveq	r3, #0
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <_Z16SystemInitializev+0xd4>
		return QA_Fail;
 80005e4:	2301      	movs	r3, #1
 80005e6:	e0b1      	b.n	800074c <_Z16SystemInitializev+0x238>
	}


	//-------------------
	//Enable SysCfg Clock
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 80005e8:	2300      	movs	r3, #0
 80005ea:	623b      	str	r3, [r7, #32]
 80005ec:	4b5a      	ldr	r3, [pc, #360]	; (8000758 <_Z16SystemInitializev+0x244>)
 80005ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005f0:	4a59      	ldr	r2, [pc, #356]	; (8000758 <_Z16SystemInitializev+0x244>)
 80005f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005f6:	6453      	str	r3, [r2, #68]	; 0x44
 80005f8:	4b57      	ldr	r3, [pc, #348]	; (8000758 <_Z16SystemInitializev+0x244>)
 80005fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000600:	623b      	str	r3, [r7, #32]
 8000602:	6a3b      	ldr	r3, [r7, #32]


	//----------------------------
	//Configure CPU and Bus Clocks
  RCC_ClkInitTypeDef RCC_ClkInit = {0};
 8000604:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]
  RCC_ClkInit.ClockType       = RCC_CLOCKTYPE_HCLK |      //Define which clocks are to be configured (HCLK, SYSCLK, PCLK1, PCLK2)
 8000614:	230f      	movs	r3, #15
 8000616:	63fb      	str	r3, [r7, #60]	; 0x3c
  		                          RCC_CLOCKTYPE_SYSCLK |
																RCC_CLOCKTYPE_PCLK1 |
																RCC_CLOCKTYPE_PCLK2;

  RCC_ClkInit.SYSCLKSource    = RCC_SYSCLKSOURCE_PLLCLK;  //Set primary PLL as system clock source
 8000618:	2302      	movs	r3, #2
 800061a:	643b      	str	r3, [r7, #64]	; 0x40

  RCC_ClkInit.AHBCLKDivider   = RCC_SYSCLK_DIV1;          //Set clock divider for host bus (AHB), DIV1 provides an AHB frequency of 168MHz
 800061c:	2300      	movs	r3, #0
 800061e:	647b      	str	r3, [r7, #68]	; 0x44

  RCC_ClkInit.APB1CLKDivider  = RCC_HCLK_DIV4;            //Set clock divider for peripheral bus 1 (APB1), DIV4 provides an APB1 frequency of 42MHz
 8000620:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000624:	64bb      	str	r3, [r7, #72]	; 0x48
                                                          //NOTE: APB1 timer clocks are clock doubled, providing APB1 timers with 84MHz clocks

  RCC_ClkInit.APB2CLKDivider  = RCC_HCLK_DIV2;            //Set clock divider for peripheral bus 2 (APB2), DIV2 provides an APB2 frequency of 84MHz
 8000626:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800062a:	64fb      	str	r3, [r7, #76]	; 0x4c
                                                          //NOTE: APB2 timer clocks are clock doubled, providing APB2 timers with 168MHz clocks

  if (HAL_RCC_ClockConfig(&RCC_ClkInit, FLASH_LATENCY_5) != HAL_OK) {  //Initialize system clocks using required values,
 800062c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000630:	2105      	movs	r1, #5
 8000632:	4618      	mov	r0, r3
 8000634:	f000 ffa4 	bl	8001580 <HAL_RCC_ClockConfig>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	bf14      	ite	ne
 800063e:	2301      	movne	r3, #1
 8000640:	2300      	moveq	r3, #0
 8000642:	b2db      	uxtb	r3, r3
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <_Z16SystemInitializev+0x138>
  	                                                                   //and setting Flash Latenvy to 5 cycles
  	return QA_Fail;
 8000648:	2301      	movs	r3, #1
 800064a:	e07f      	b.n	800074c <_Z16SystemInitializev+0x238>
  }


  //---------------------------
  //Configure Peripheral Clocks
  RCC_PeriphCLKInitTypeDef RCC_PeriphClkInit = {0};
 800064c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
  RCC_PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S; //RCC_PERIPHCLK_PLLI2S
 800065a:	2301      	movs	r3, #1
 800065c:	62fb      	str	r3, [r7, #44]	; 0x2c

    //Define settings for PLLI2S, as this PLL is used for streaming audio data via I2S to the CS43L22 audio codec IC on the discovery board
  RCC_PeriphClkInit.PLLI2S.PLLI2SN       = 258;
 800065e:	f44f 7381 	mov.w	r3, #258	; 0x102
 8000662:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_PeriphClkInit.PLLI2S.PLLI2SR       = 3;
 8000664:	2303      	movs	r3, #3
 8000666:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphClkInit) != HAL_OK) {
 8000668:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800066c:	4618      	mov	r0, r3
 800066e:	f001 f94f 	bl	8001910 <HAL_RCCEx_PeriphCLKConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	bf14      	ite	ne
 8000678:	2301      	movne	r3, #1
 800067a:	2300      	moveq	r3, #0
 800067c:	b2db      	uxtb	r3, r3
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <_Z16SystemInitializev+0x172>
  	return QA_Fail;
 8000682:	2301      	movs	r3, #1
 8000684:	e062      	b.n	800074c <_Z16SystemInitializev+0x238>
  }


  //---------------------------
  //Enable all GPIO Port clocks
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	61fb      	str	r3, [r7, #28]
 800068a:	4b33      	ldr	r3, [pc, #204]	; (8000758 <_Z16SystemInitializev+0x244>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	4a32      	ldr	r2, [pc, #200]	; (8000758 <_Z16SystemInitializev+0x244>)
 8000690:	f043 0301 	orr.w	r3, r3, #1
 8000694:	6313      	str	r3, [r2, #48]	; 0x30
 8000696:	4b30      	ldr	r3, [pc, #192]	; (8000758 <_Z16SystemInitializev+0x244>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	61fb      	str	r3, [r7, #28]
 80006a0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	61bb      	str	r3, [r7, #24]
 80006a6:	4b2c      	ldr	r3, [pc, #176]	; (8000758 <_Z16SystemInitializev+0x244>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	4a2b      	ldr	r2, [pc, #172]	; (8000758 <_Z16SystemInitializev+0x244>)
 80006ac:	f043 0302 	orr.w	r3, r3, #2
 80006b0:	6313      	str	r3, [r2, #48]	; 0x30
 80006b2:	4b29      	ldr	r3, [pc, #164]	; (8000758 <_Z16SystemInitializev+0x244>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	f003 0302 	and.w	r3, r3, #2
 80006ba:	61bb      	str	r3, [r7, #24]
 80006bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	617b      	str	r3, [r7, #20]
 80006c2:	4b25      	ldr	r3, [pc, #148]	; (8000758 <_Z16SystemInitializev+0x244>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	4a24      	ldr	r2, [pc, #144]	; (8000758 <_Z16SystemInitializev+0x244>)
 80006c8:	f043 0304 	orr.w	r3, r3, #4
 80006cc:	6313      	str	r3, [r2, #48]	; 0x30
 80006ce:	4b22      	ldr	r3, [pc, #136]	; (8000758 <_Z16SystemInitializev+0x244>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	f003 0304 	and.w	r3, r3, #4
 80006d6:	617b      	str	r3, [r7, #20]
 80006d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	613b      	str	r3, [r7, #16]
 80006de:	4b1e      	ldr	r3, [pc, #120]	; (8000758 <_Z16SystemInitializev+0x244>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	4a1d      	ldr	r2, [pc, #116]	; (8000758 <_Z16SystemInitializev+0x244>)
 80006e4:	f043 0308 	orr.w	r3, r3, #8
 80006e8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ea:	4b1b      	ldr	r3, [pc, #108]	; (8000758 <_Z16SystemInitializev+0x244>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	f003 0308 	and.w	r3, r3, #8
 80006f2:	613b      	str	r3, [r7, #16]
 80006f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	60fb      	str	r3, [r7, #12]
 80006fa:	4b17      	ldr	r3, [pc, #92]	; (8000758 <_Z16SystemInitializev+0x244>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a16      	ldr	r2, [pc, #88]	; (8000758 <_Z16SystemInitializev+0x244>)
 8000700:	f043 0310 	orr.w	r3, r3, #16
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b14      	ldr	r3, [pc, #80]	; (8000758 <_Z16SystemInitializev+0x244>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f003 0310 	and.w	r3, r3, #16
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]


  //---------------------
  //Enable all DMA clocks
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	60bb      	str	r3, [r7, #8]
 8000716:	4b10      	ldr	r3, [pc, #64]	; (8000758 <_Z16SystemInitializev+0x244>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a0f      	ldr	r2, [pc, #60]	; (8000758 <_Z16SystemInitializev+0x244>)
 800071c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b0d      	ldr	r3, [pc, #52]	; (8000758 <_Z16SystemInitializev+0x244>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800072a:	60bb      	str	r3, [r7, #8]
 800072c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	4b09      	ldr	r3, [pc, #36]	; (8000758 <_Z16SystemInitializev+0x244>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a08      	ldr	r2, [pc, #32]	; (8000758 <_Z16SystemInitializev+0x244>)
 8000738:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b06      	ldr	r3, [pc, #24]	; (8000758 <_Z16SystemInitializev+0x244>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]


  //Return
  return QA_OK;
 800074a:	2300      	movs	r3, #0
}
 800074c:	4618      	mov	r0, r3
 800074e:	3780      	adds	r7, #128	; 0x80
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40023c00 	.word	0x40023c00
 8000758:	40023800 	.word	0x40023800
 800075c:	40007000 	.word	0x40007000

08000760 <NMI_Handler>:
  //---------------------------
  //Exception Handler Functions

//NMI_Handler
//Exception Handler Function
void NMI_Handler(void) {
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0

}
 8000764:	bf00      	nop
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
	...

08000770 <HardFault_Handler>:


//HardFault_Handler
//Exception Handler Function
void HardFault_Handler(void) {
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  GPIO_UserLED_Red->on();
 8000774:	4b0a      	ldr	r3, [pc, #40]	; (80007a0 <HardFault_Handler+0x30>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4618      	mov	r0, r3
 800077a:	f001 f9cc 	bl	8001b16 <_ZN15QAD_GPIO_Output2onEv>
  GPIO_UserLED_Orange->on();
 800077e:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <HardFault_Handler+0x34>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4618      	mov	r0, r3
 8000784:	f001 f9c7 	bl	8001b16 <_ZN15QAD_GPIO_Output2onEv>
  GPIO_UserLED_Green->off();
 8000788:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <HardFault_Handler+0x38>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4618      	mov	r0, r3
 800078e:	f001 f9d5 	bl	8001b3c <_ZN15QAD_GPIO_Output3offEv>
  GPIO_UserLED_Blue->off();
 8000792:	4b06      	ldr	r3, [pc, #24]	; (80007ac <HardFault_Handler+0x3c>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4618      	mov	r0, r3
 8000798:	f001 f9d0 	bl	8001b3c <_ZN15QAD_GPIO_Output3offEv>
  while(1) {}
 800079c:	e7fe      	b.n	800079c <HardFault_Handler+0x2c>
 800079e:	bf00      	nop
 80007a0:	20000094 	.word	0x20000094
 80007a4:	20000090 	.word	0x20000090
 80007a8:	2000008c 	.word	0x2000008c
 80007ac:	20000098 	.word	0x20000098

080007b0 <MemManage_Handler>:
}


//MemManage_Handler
//Exception Handler Function
void MemManage_Handler(void) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  GPIO_UserLED_Red->on();
 80007b4:	4b0a      	ldr	r3, [pc, #40]	; (80007e0 <MemManage_Handler+0x30>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4618      	mov	r0, r3
 80007ba:	f001 f9ac 	bl	8001b16 <_ZN15QAD_GPIO_Output2onEv>
  GPIO_UserLED_Orange->on();
 80007be:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <MemManage_Handler+0x34>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4618      	mov	r0, r3
 80007c4:	f001 f9a7 	bl	8001b16 <_ZN15QAD_GPIO_Output2onEv>
  GPIO_UserLED_Green->off();
 80007c8:	4b07      	ldr	r3, [pc, #28]	; (80007e8 <MemManage_Handler+0x38>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4618      	mov	r0, r3
 80007ce:	f001 f9b5 	bl	8001b3c <_ZN15QAD_GPIO_Output3offEv>
  GPIO_UserLED_Blue->off();
 80007d2:	4b06      	ldr	r3, [pc, #24]	; (80007ec <MemManage_Handler+0x3c>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4618      	mov	r0, r3
 80007d8:	f001 f9b0 	bl	8001b3c <_ZN15QAD_GPIO_Output3offEv>
  while(1) {}
 80007dc:	e7fe      	b.n	80007dc <MemManage_Handler+0x2c>
 80007de:	bf00      	nop
 80007e0:	20000094 	.word	0x20000094
 80007e4:	20000090 	.word	0x20000090
 80007e8:	2000008c 	.word	0x2000008c
 80007ec:	20000098 	.word	0x20000098

080007f0 <BusFault_Handler>:
}


//BusFault_Handler
//Exception Handler Function
void BusFault_Handler(void) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  GPIO_UserLED_Red->on();
 80007f4:	4b0a      	ldr	r3, [pc, #40]	; (8000820 <BusFault_Handler+0x30>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4618      	mov	r0, r3
 80007fa:	f001 f98c 	bl	8001b16 <_ZN15QAD_GPIO_Output2onEv>
  GPIO_UserLED_Orange->on();
 80007fe:	4b09      	ldr	r3, [pc, #36]	; (8000824 <BusFault_Handler+0x34>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4618      	mov	r0, r3
 8000804:	f001 f987 	bl	8001b16 <_ZN15QAD_GPIO_Output2onEv>
  GPIO_UserLED_Green->off();
 8000808:	4b07      	ldr	r3, [pc, #28]	; (8000828 <BusFault_Handler+0x38>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4618      	mov	r0, r3
 800080e:	f001 f995 	bl	8001b3c <_ZN15QAD_GPIO_Output3offEv>
  GPIO_UserLED_Blue->off();
 8000812:	4b06      	ldr	r3, [pc, #24]	; (800082c <BusFault_Handler+0x3c>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4618      	mov	r0, r3
 8000818:	f001 f990 	bl	8001b3c <_ZN15QAD_GPIO_Output3offEv>
  while(1) {}
 800081c:	e7fe      	b.n	800081c <BusFault_Handler+0x2c>
 800081e:	bf00      	nop
 8000820:	20000094 	.word	0x20000094
 8000824:	20000090 	.word	0x20000090
 8000828:	2000008c 	.word	0x2000008c
 800082c:	20000098 	.word	0x20000098

08000830 <UsageFault_Handler>:
}


//UsageFault_Handler
//Exception Handler Function
void UsageFault_Handler(void) {
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  GPIO_UserLED_Red->on();
 8000834:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <UsageFault_Handler+0x30>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4618      	mov	r0, r3
 800083a:	f001 f96c 	bl	8001b16 <_ZN15QAD_GPIO_Output2onEv>
  GPIO_UserLED_Orange->on();
 800083e:	4b09      	ldr	r3, [pc, #36]	; (8000864 <UsageFault_Handler+0x34>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4618      	mov	r0, r3
 8000844:	f001 f967 	bl	8001b16 <_ZN15QAD_GPIO_Output2onEv>
  GPIO_UserLED_Green->off();
 8000848:	4b07      	ldr	r3, [pc, #28]	; (8000868 <UsageFault_Handler+0x38>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4618      	mov	r0, r3
 800084e:	f001 f975 	bl	8001b3c <_ZN15QAD_GPIO_Output3offEv>
  GPIO_UserLED_Blue->off();
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <UsageFault_Handler+0x3c>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4618      	mov	r0, r3
 8000858:	f001 f970 	bl	8001b3c <_ZN15QAD_GPIO_Output3offEv>
  while(1) {}
 800085c:	e7fe      	b.n	800085c <UsageFault_Handler+0x2c>
 800085e:	bf00      	nop
 8000860:	20000094 	.word	0x20000094
 8000864:	20000090 	.word	0x20000090
 8000868:	2000008c 	.word	0x2000008c
 800086c:	20000098 	.word	0x20000098

08000870 <SVC_Handler>:
}


//SVC_Handler
//Exception Handler Function
void SVC_Handler(void) {
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0

}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr

0800087e <DebugMon_Handler>:


//DebugMon_Handler
//Exception Handler Function
void DebugMon_Handler(void) {
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0

}
 8000882:	bf00      	nop
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <PendSV_Handler>:


//PendSV_Handler
//Exception Handler Function
void PendSV_Handler(void) {
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0

}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr

0800089a <SysTick_Handler>:


//SysTick_Handler
//Exception Handler Function
void SysTick_Handler(void) {
 800089a:	b580      	push	{r7, lr}
 800089c:	af00      	add	r7, sp, #0
  HAL_IncTick();
 800089e:	f000 f92f 	bl	8000b00 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80008a2:	f000 fa32 	bl	8000d0a <HAL_SYSTICK_IRQHandler>
}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
	...

080008ac <main>:
//main
//Application Entry Point
//
//This is the first C++ function to be called when the microcontroller starts up
//This function is called by the assembly language in startup_stm32f407vgtx.s
int main(void) {
 80008ac:	b590      	push	{r4, r7, lr}
 80008ae:	b087      	sub	sp, #28
 80008b0:	af00      	add	r7, sp, #0


	//Calls the SystemInitialize method located within boot.hpp, which initializes the
	//CPU caches, as well as the PLLs, system, bus and some peripheral clocks.
	//All GPIO Port and DMA clocks are also enabled by this method.
  if (SystemInitialize()) {
 80008b2:	f7ff fe2f 	bl	8000514 <_Z16SystemInitializev>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	bf14      	ite	ne
 80008bc:	2301      	movne	r3, #1
 80008be:	2300      	moveq	r3, #0
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d000      	beq.n	80008c8 <main+0x1c>
  	while (1) {}
 80008c6:	e7fe      	b.n	80008c6 <main+0x1a>


	//----------------------------------
  //Initialize the User LEDs using the QAD_GPIO_Output driver class
  //QAD_USERLED_**** definitions are defined in setup.hpp
  GPIO_UserLED_Green  = new QAD_GPIO_Output(QAD_USERLED_GREEN_GPIO_PORT, QAD_USERLED_GREEN_GPIO_PIN);
 80008c8:	2014      	movs	r0, #20
 80008ca:	f001 f989 	bl	8001be0 <_Znwj>
 80008ce:	4603      	mov	r3, r0
 80008d0:	461c      	mov	r4, r3
 80008d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80008d6:	4938      	ldr	r1, [pc, #224]	; (80009b8 <main+0x10c>)
 80008d8:	4620      	mov	r0, r4
 80008da:	f001 f8fb 	bl	8001ad4 <_ZN15QAD_GPIO_OutputC1EP12GPIO_TypeDeft>
 80008de:	4b37      	ldr	r3, [pc, #220]	; (80009bc <main+0x110>)
 80008e0:	601c      	str	r4, [r3, #0]
	GPIO_UserLED_Orange = new QAD_GPIO_Output(QAD_USERLED_ORANGE_GPIO_PORT, QAD_USERLED_ORANGE_GPIO_PIN);
 80008e2:	2014      	movs	r0, #20
 80008e4:	f001 f97c 	bl	8001be0 <_Znwj>
 80008e8:	4603      	mov	r3, r0
 80008ea:	461c      	mov	r4, r3
 80008ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008f0:	4931      	ldr	r1, [pc, #196]	; (80009b8 <main+0x10c>)
 80008f2:	4620      	mov	r0, r4
 80008f4:	f001 f8ee 	bl	8001ad4 <_ZN15QAD_GPIO_OutputC1EP12GPIO_TypeDeft>
 80008f8:	4b31      	ldr	r3, [pc, #196]	; (80009c0 <main+0x114>)
 80008fa:	601c      	str	r4, [r3, #0]
	GPIO_UserLED_Red    = new QAD_GPIO_Output(QAD_USERLED_RED_GPIO_PORT, QAD_USERLED_RED_GPIO_PIN);
 80008fc:	2014      	movs	r0, #20
 80008fe:	f001 f96f 	bl	8001be0 <_Znwj>
 8000902:	4603      	mov	r3, r0
 8000904:	461c      	mov	r4, r3
 8000906:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800090a:	492b      	ldr	r1, [pc, #172]	; (80009b8 <main+0x10c>)
 800090c:	4620      	mov	r0, r4
 800090e:	f001 f8e1 	bl	8001ad4 <_ZN15QAD_GPIO_OutputC1EP12GPIO_TypeDeft>
 8000912:	4b2c      	ldr	r3, [pc, #176]	; (80009c4 <main+0x118>)
 8000914:	601c      	str	r4, [r3, #0]
	GPIO_UserLED_Blue   = new QAD_GPIO_Output(QAD_USERLED_BLUE_GPIO_PORT, QAD_USERLED_BLUE_GPIO_PIN);
 8000916:	2014      	movs	r0, #20
 8000918:	f001 f962 	bl	8001be0 <_Znwj>
 800091c:	4603      	mov	r3, r0
 800091e:	461c      	mov	r4, r3
 8000920:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000924:	4924      	ldr	r1, [pc, #144]	; (80009b8 <main+0x10c>)
 8000926:	4620      	mov	r0, r4
 8000928:	f001 f8d4 	bl	8001ad4 <_ZN15QAD_GPIO_OutputC1EP12GPIO_TypeDeft>
 800092c:	4b26      	ldr	r3, [pc, #152]	; (80009c8 <main+0x11c>)
 800092e:	601c      	str	r4, [r3, #0]


	//Test Orange, Red and Blue LEDs
	GPIO_UserLED_Orange->on();
 8000930:	4b23      	ldr	r3, [pc, #140]	; (80009c0 <main+0x114>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4618      	mov	r0, r3
 8000936:	f001 f8ee 	bl	8001b16 <_ZN15QAD_GPIO_Output2onEv>
	GPIO_UserLED_Red->on();
 800093a:	4b22      	ldr	r3, [pc, #136]	; (80009c4 <main+0x118>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4618      	mov	r0, r3
 8000940:	f001 f8e9 	bl	8001b16 <_ZN15QAD_GPIO_Output2onEv>
	GPIO_UserLED_Blue->on();
 8000944:	4b20      	ldr	r3, [pc, #128]	; (80009c8 <main+0x11c>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4618      	mov	r0, r3
 800094a:	f001 f8e4 	bl	8001b16 <_ZN15QAD_GPIO_Output2onEv>
  //Processing Loop

	//Create processing loop timing variables
	uint32_t uTicks;
	uint32_t uCurTick;
	uint32_t uNewTick = HAL_GetTick();
 800094e:	f000 f8eb 	bl	8000b28 <HAL_GetTick>
 8000952:	6138      	str	r0, [r7, #16]
	uint32_t uOldTick = uNewTick;
 8000954:	693b      	ldr	r3, [r7, #16]
 8000956:	60bb      	str	r3, [r7, #8]

	//Create task timing variables
	uint32_t uHeartbeatTicks = 0;
 8000958:	2300      	movs	r3, #0
 800095a:	60fb      	str	r3, [r7, #12]

		//----------------------------------
		//Frame Timing
		//Calculates how many ticks (in milliseconds) have passed since the previous loop, this value is placed into the uTicks variable
		//uTicks is then used to calculate task timing below
    uCurTick = HAL_GetTick();
 800095c:	f000 f8e4 	bl	8000b28 <HAL_GetTick>
 8000960:	6078      	str	r0, [r7, #4]
    if (uCurTick != uNewTick) { //Handle loop faster than 1ms issue
 8000962:	687a      	ldr	r2, [r7, #4]
 8000964:	693b      	ldr	r3, [r7, #16]
 8000966:	429a      	cmp	r2, r3
 8000968:	d012      	beq.n	8000990 <main+0xe4>
    	uOldTick = uNewTick;
 800096a:	693b      	ldr	r3, [r7, #16]
 800096c:	60bb      	str	r3, [r7, #8]
    	uNewTick = uCurTick;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	613b      	str	r3, [r7, #16]
    	if (uNewTick < uOldTick) { //Handle 32bit overflow issue
 8000972:	693a      	ldr	r2, [r7, #16]
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	429a      	cmp	r2, r3
 8000978:	d205      	bcs.n	8000986 <main+0xda>
    		uTicks = (uNewTick + (0xFFFFFFFF - uOldTick));
 800097a:	693a      	ldr	r2, [r7, #16]
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	1ad3      	subs	r3, r2, r3
 8000980:	3b01      	subs	r3, #1
 8000982:	617b      	str	r3, [r7, #20]
 8000984:	e006      	b.n	8000994 <main+0xe8>
    	} else {
    		uTicks = (uNewTick - uOldTick);
 8000986:	693a      	ldr	r2, [r7, #16]
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	1ad3      	subs	r3, r2, r3
 800098c:	617b      	str	r3, [r7, #20]
 800098e:	e001      	b.n	8000994 <main+0xe8>
    	}

    } else {
    	uTicks = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	617b      	str	r3, [r7, #20]

  	//----------------------------------
    //Update Heartbeat LED
    //The heartbeat LED uses the User LED to flash at a regular rate to visually show whether the microcontroller has locked up or
    //become stuck in an exception or interrupt handler
    uHeartbeatTicks += uTicks;
 8000994:	68fa      	ldr	r2, [r7, #12]
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	4413      	add	r3, r2
 800099a:	60fb      	str	r3, [r7, #12]
    if (uHeartbeatTicks >= QA_FT_HeartbeatTickThreshold) { //If heartbeat ticks has exceeded threshold then update heartbeat LED
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80009a2:	d3db      	bcc.n	800095c <main+0xb0>
    	GPIO_UserLED_Green->toggle();
 80009a4:	4b05      	ldr	r3, [pc, #20]	; (80009bc <main+0x110>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4618      	mov	r0, r3
 80009aa:	f001 f8da 	bl	8001b62 <_ZN15QAD_GPIO_Output6toggleEv>
    	uHeartbeatTicks -= QA_FT_HeartbeatTickThreshold;     //Reset hearbeat ticks
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80009b4:	60fb      	str	r3, [r7, #12]
    uCurTick = HAL_GetTick();
 80009b6:	e7d1      	b.n	800095c <main+0xb0>
 80009b8:	40020c00 	.word	0x40020c00
 80009bc:	2000008c 	.word	0x2000008c
 80009c0:	20000090 	.word	0x20000090
 80009c4:	20000094 	.word	0x20000094
 80009c8:	20000098 	.word	0x20000098

080009cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
	return 1;
 80009d0:	2301      	movs	r3, #1
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <_kill>:

int _kill(int pid, int sig)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80009e6:	f001 f91d 	bl	8001c24 <__errno>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2216      	movs	r2, #22
 80009ee:	601a      	str	r2, [r3, #0]
	return -1;
 80009f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}

080009fc <_exit>:

void _exit (int status)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000a04:	f04f 31ff 	mov.w	r1, #4294967295
 8000a08:	6878      	ldr	r0, [r7, #4]
 8000a0a:	f7ff ffe7 	bl	80009dc <_kill>
	while (1) {}		/* Make sure we hang here */
 8000a0e:	e7fe      	b.n	8000a0e <_exit+0x12>

08000a10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b086      	sub	sp, #24
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a18:	4a14      	ldr	r2, [pc, #80]	; (8000a6c <_sbrk+0x5c>)
 8000a1a:	4b15      	ldr	r3, [pc, #84]	; (8000a70 <_sbrk+0x60>)
 8000a1c:	1ad3      	subs	r3, r2, r3
 8000a1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a24:	4b13      	ldr	r3, [pc, #76]	; (8000a74 <_sbrk+0x64>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d102      	bne.n	8000a32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a2c:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <_sbrk+0x64>)
 8000a2e:	4a12      	ldr	r2, [pc, #72]	; (8000a78 <_sbrk+0x68>)
 8000a30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a32:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <_sbrk+0x64>)
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4413      	add	r3, r2
 8000a3a:	693a      	ldr	r2, [r7, #16]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	d207      	bcs.n	8000a50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a40:	f001 f8f0 	bl	8001c24 <__errno>
 8000a44:	4603      	mov	r3, r0
 8000a46:	220c      	movs	r2, #12
 8000a48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a4e:	e009      	b.n	8000a64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a50:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <_sbrk+0x64>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a56:	4b07      	ldr	r3, [pc, #28]	; (8000a74 <_sbrk+0x64>)
 8000a58:	681a      	ldr	r2, [r3, #0]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	4a05      	ldr	r2, [pc, #20]	; (8000a74 <_sbrk+0x64>)
 8000a60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a62:	68fb      	ldr	r3, [r7, #12]
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3718      	adds	r7, #24
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	20020000 	.word	0x20020000
 8000a70:	00000400 	.word	0x00000400
 8000a74:	2000009c 	.word	0x2000009c
 8000a78:	200000c0 	.word	0x200000c0

08000a7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <SystemInit+0x20>)
 8000a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a86:	4a05      	ldr	r2, [pc, #20]	; (8000a9c <SystemInit+0x20>)
 8000a88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aa8:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <HAL_InitTick+0x54>)
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <HAL_InitTick+0x58>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ab6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f000 f917 	bl	8000cf2 <HAL_SYSTICK_Config>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aca:	2301      	movs	r3, #1
 8000acc:	e00e      	b.n	8000aec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	2b0f      	cmp	r3, #15
 8000ad2:	d80a      	bhi.n	8000aea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	6879      	ldr	r1, [r7, #4]
 8000ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8000adc:	f000 f8ed 	bl	8000cba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ae0:	4a06      	ldr	r2, [pc, #24]	; (8000afc <HAL_InitTick+0x5c>)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e000      	b.n	8000aec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aea:	2301      	movs	r3, #1
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000000 	.word	0x20000000
 8000af8:	20000008 	.word	0x20000008
 8000afc:	20000004 	.word	0x20000004

08000b00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <HAL_IncTick+0x20>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	461a      	mov	r2, r3
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <HAL_IncTick+0x24>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4413      	add	r3, r2
 8000b10:	4a04      	ldr	r2, [pc, #16]	; (8000b24 <HAL_IncTick+0x24>)
 8000b12:	6013      	str	r3, [r2, #0]
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	20000008 	.word	0x20000008
 8000b24:	200000ac 	.word	0x200000ac

08000b28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b2c:	4b03      	ldr	r3, [pc, #12]	; (8000b3c <HAL_GetTick+0x14>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	200000ac 	.word	0x200000ac

08000b40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	f003 0307 	and.w	r3, r3, #7
 8000b4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b50:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <__NVIC_SetPriorityGrouping+0x44>)
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b56:	68ba      	ldr	r2, [r7, #8]
 8000b58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b72:	4a04      	ldr	r2, [pc, #16]	; (8000b84 <__NVIC_SetPriorityGrouping+0x44>)
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	60d3      	str	r3, [r2, #12]
}
 8000b78:	bf00      	nop
 8000b7a:	3714      	adds	r7, #20
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b8c:	4b04      	ldr	r3, [pc, #16]	; (8000ba0 <__NVIC_GetPriorityGrouping+0x18>)
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	0a1b      	lsrs	r3, r3, #8
 8000b92:	f003 0307 	and.w	r3, r3, #7
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	6039      	str	r1, [r7, #0]
 8000bae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	db0a      	blt.n	8000bce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	b2da      	uxtb	r2, r3
 8000bbc:	490c      	ldr	r1, [pc, #48]	; (8000bf0 <__NVIC_SetPriority+0x4c>)
 8000bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc2:	0112      	lsls	r2, r2, #4
 8000bc4:	b2d2      	uxtb	r2, r2
 8000bc6:	440b      	add	r3, r1
 8000bc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bcc:	e00a      	b.n	8000be4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	b2da      	uxtb	r2, r3
 8000bd2:	4908      	ldr	r1, [pc, #32]	; (8000bf4 <__NVIC_SetPriority+0x50>)
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	f003 030f 	and.w	r3, r3, #15
 8000bda:	3b04      	subs	r3, #4
 8000bdc:	0112      	lsls	r2, r2, #4
 8000bde:	b2d2      	uxtb	r2, r2
 8000be0:	440b      	add	r3, r1
 8000be2:	761a      	strb	r2, [r3, #24]
}
 8000be4:	bf00      	nop
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	e000e100 	.word	0xe000e100
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b089      	sub	sp, #36	; 0x24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	60b9      	str	r1, [r7, #8]
 8000c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	f003 0307 	and.w	r3, r3, #7
 8000c0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c0c:	69fb      	ldr	r3, [r7, #28]
 8000c0e:	f1c3 0307 	rsb	r3, r3, #7
 8000c12:	2b04      	cmp	r3, #4
 8000c14:	bf28      	it	cs
 8000c16:	2304      	movcs	r3, #4
 8000c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	3304      	adds	r3, #4
 8000c1e:	2b06      	cmp	r3, #6
 8000c20:	d902      	bls.n	8000c28 <NVIC_EncodePriority+0x30>
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	3b03      	subs	r3, #3
 8000c26:	e000      	b.n	8000c2a <NVIC_EncodePriority+0x32>
 8000c28:	2300      	movs	r3, #0
 8000c2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c30:	69bb      	ldr	r3, [r7, #24]
 8000c32:	fa02 f303 	lsl.w	r3, r2, r3
 8000c36:	43da      	mvns	r2, r3
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	401a      	ands	r2, r3
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c40:	f04f 31ff 	mov.w	r1, #4294967295
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4a:	43d9      	mvns	r1, r3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c50:	4313      	orrs	r3, r2
         );
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3724      	adds	r7, #36	; 0x24
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
	...

08000c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c70:	d301      	bcc.n	8000c76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c72:	2301      	movs	r3, #1
 8000c74:	e00f      	b.n	8000c96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c76:	4a0a      	ldr	r2, [pc, #40]	; (8000ca0 <SysTick_Config+0x40>)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c7e:	210f      	movs	r1, #15
 8000c80:	f04f 30ff 	mov.w	r0, #4294967295
 8000c84:	f7ff ff8e 	bl	8000ba4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c88:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <SysTick_Config+0x40>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c8e:	4b04      	ldr	r3, [pc, #16]	; (8000ca0 <SysTick_Config+0x40>)
 8000c90:	2207      	movs	r2, #7
 8000c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	e000e010 	.word	0xe000e010

08000ca4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f7ff ff47 	bl	8000b40 <__NVIC_SetPriorityGrouping>
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b086      	sub	sp, #24
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	60b9      	str	r1, [r7, #8]
 8000cc4:	607a      	str	r2, [r7, #4]
 8000cc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ccc:	f7ff ff5c 	bl	8000b88 <__NVIC_GetPriorityGrouping>
 8000cd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	68b9      	ldr	r1, [r7, #8]
 8000cd6:	6978      	ldr	r0, [r7, #20]
 8000cd8:	f7ff ff8e 	bl	8000bf8 <NVIC_EncodePriority>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ce2:	4611      	mov	r1, r2
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff ff5d 	bl	8000ba4 <__NVIC_SetPriority>
}
 8000cea:	bf00      	nop
 8000cec:	3718      	adds	r7, #24
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b082      	sub	sp, #8
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	f7ff ffb0 	bl	8000c60 <SysTick_Config>
 8000d00:	4603      	mov	r3, r0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000d0e:	f000 f802 	bl	8000d16 <HAL_SYSTICK_Callback>
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000d1a:	bf00      	nop
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b089      	sub	sp, #36	; 0x24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d32:	2300      	movs	r3, #0
 8000d34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61fb      	str	r3, [r7, #28]
 8000d3e:	e16b      	b.n	8001018 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d40:	2201      	movs	r2, #1
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	697a      	ldr	r2, [r7, #20]
 8000d50:	4013      	ands	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	f040 815a 	bne.w	8001012 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f003 0303 	and.w	r3, r3, #3
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d005      	beq.n	8000d76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d72:	2b02      	cmp	r3, #2
 8000d74:	d130      	bne.n	8000dd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	2203      	movs	r2, #3
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	43db      	mvns	r3, r3
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	68da      	ldr	r2, [r3, #12]
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	69ba      	ldr	r2, [r7, #24]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	69ba      	ldr	r2, [r7, #24]
 8000da4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dac:	2201      	movs	r2, #1
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	43db      	mvns	r3, r3
 8000db6:	69ba      	ldr	r2, [r7, #24]
 8000db8:	4013      	ands	r3, r2
 8000dba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	091b      	lsrs	r3, r3, #4
 8000dc2:	f003 0201 	and.w	r2, r3, #1
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f003 0303 	and.w	r3, r3, #3
 8000de0:	2b03      	cmp	r3, #3
 8000de2:	d017      	beq.n	8000e14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	2203      	movs	r2, #3
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	43db      	mvns	r3, r3
 8000df6:	69ba      	ldr	r2, [r7, #24]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	689a      	ldr	r2, [r3, #8]
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f003 0303 	and.w	r3, r3, #3
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d123      	bne.n	8000e68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	08da      	lsrs	r2, r3, #3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	3208      	adds	r2, #8
 8000e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	f003 0307 	and.w	r3, r3, #7
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	220f      	movs	r2, #15
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	4013      	ands	r3, r2
 8000e42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	691a      	ldr	r2, [r3, #16]
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	f003 0307 	and.w	r3, r3, #7
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	08da      	lsrs	r2, r3, #3
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	3208      	adds	r2, #8
 8000e62:	69b9      	ldr	r1, [r7, #24]
 8000e64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	2203      	movs	r2, #3
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f003 0203 	and.w	r2, r3, #3
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	f000 80b4 	beq.w	8001012 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60fb      	str	r3, [r7, #12]
 8000eae:	4b60      	ldr	r3, [pc, #384]	; (8001030 <HAL_GPIO_Init+0x30c>)
 8000eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb2:	4a5f      	ldr	r2, [pc, #380]	; (8001030 <HAL_GPIO_Init+0x30c>)
 8000eb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eba:	4b5d      	ldr	r3, [pc, #372]	; (8001030 <HAL_GPIO_Init+0x30c>)
 8000ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ebe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ec6:	4a5b      	ldr	r2, [pc, #364]	; (8001034 <HAL_GPIO_Init+0x310>)
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	089b      	lsrs	r3, r3, #2
 8000ecc:	3302      	adds	r3, #2
 8000ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	f003 0303 	and.w	r3, r3, #3
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	220f      	movs	r2, #15
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a52      	ldr	r2, [pc, #328]	; (8001038 <HAL_GPIO_Init+0x314>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d02b      	beq.n	8000f4a <HAL_GPIO_Init+0x226>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a51      	ldr	r2, [pc, #324]	; (800103c <HAL_GPIO_Init+0x318>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d025      	beq.n	8000f46 <HAL_GPIO_Init+0x222>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a50      	ldr	r2, [pc, #320]	; (8001040 <HAL_GPIO_Init+0x31c>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d01f      	beq.n	8000f42 <HAL_GPIO_Init+0x21e>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a4f      	ldr	r2, [pc, #316]	; (8001044 <HAL_GPIO_Init+0x320>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d019      	beq.n	8000f3e <HAL_GPIO_Init+0x21a>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a4e      	ldr	r2, [pc, #312]	; (8001048 <HAL_GPIO_Init+0x324>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d013      	beq.n	8000f3a <HAL_GPIO_Init+0x216>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a4d      	ldr	r2, [pc, #308]	; (800104c <HAL_GPIO_Init+0x328>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d00d      	beq.n	8000f36 <HAL_GPIO_Init+0x212>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a4c      	ldr	r2, [pc, #304]	; (8001050 <HAL_GPIO_Init+0x32c>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d007      	beq.n	8000f32 <HAL_GPIO_Init+0x20e>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a4b      	ldr	r2, [pc, #300]	; (8001054 <HAL_GPIO_Init+0x330>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d101      	bne.n	8000f2e <HAL_GPIO_Init+0x20a>
 8000f2a:	2307      	movs	r3, #7
 8000f2c:	e00e      	b.n	8000f4c <HAL_GPIO_Init+0x228>
 8000f2e:	2308      	movs	r3, #8
 8000f30:	e00c      	b.n	8000f4c <HAL_GPIO_Init+0x228>
 8000f32:	2306      	movs	r3, #6
 8000f34:	e00a      	b.n	8000f4c <HAL_GPIO_Init+0x228>
 8000f36:	2305      	movs	r3, #5
 8000f38:	e008      	b.n	8000f4c <HAL_GPIO_Init+0x228>
 8000f3a:	2304      	movs	r3, #4
 8000f3c:	e006      	b.n	8000f4c <HAL_GPIO_Init+0x228>
 8000f3e:	2303      	movs	r3, #3
 8000f40:	e004      	b.n	8000f4c <HAL_GPIO_Init+0x228>
 8000f42:	2302      	movs	r3, #2
 8000f44:	e002      	b.n	8000f4c <HAL_GPIO_Init+0x228>
 8000f46:	2301      	movs	r3, #1
 8000f48:	e000      	b.n	8000f4c <HAL_GPIO_Init+0x228>
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	69fa      	ldr	r2, [r7, #28]
 8000f4e:	f002 0203 	and.w	r2, r2, #3
 8000f52:	0092      	lsls	r2, r2, #2
 8000f54:	4093      	lsls	r3, r2
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f5c:	4935      	ldr	r1, [pc, #212]	; (8001034 <HAL_GPIO_Init+0x310>)
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	089b      	lsrs	r3, r3, #2
 8000f62:	3302      	adds	r3, #2
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f6a:	4b3b      	ldr	r3, [pc, #236]	; (8001058 <HAL_GPIO_Init+0x334>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	43db      	mvns	r3, r3
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	4013      	ands	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d003      	beq.n	8000f8e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f8e:	4a32      	ldr	r2, [pc, #200]	; (8001058 <HAL_GPIO_Init+0x334>)
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f94:	4b30      	ldr	r3, [pc, #192]	; (8001058 <HAL_GPIO_Init+0x334>)
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d003      	beq.n	8000fb8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fb8:	4a27      	ldr	r2, [pc, #156]	; (8001058 <HAL_GPIO_Init+0x334>)
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fbe:	4b26      	ldr	r3, [pc, #152]	; (8001058 <HAL_GPIO_Init+0x334>)
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d003      	beq.n	8000fe2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fe2:	4a1d      	ldr	r2, [pc, #116]	; (8001058 <HAL_GPIO_Init+0x334>)
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fe8:	4b1b      	ldr	r3, [pc, #108]	; (8001058 <HAL_GPIO_Init+0x334>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001000:	2b00      	cmp	r3, #0
 8001002:	d003      	beq.n	800100c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	4313      	orrs	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800100c:	4a12      	ldr	r2, [pc, #72]	; (8001058 <HAL_GPIO_Init+0x334>)
 800100e:	69bb      	ldr	r3, [r7, #24]
 8001010:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	3301      	adds	r3, #1
 8001016:	61fb      	str	r3, [r7, #28]
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	2b0f      	cmp	r3, #15
 800101c:	f67f ae90 	bls.w	8000d40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001020:	bf00      	nop
 8001022:	bf00      	nop
 8001024:	3724      	adds	r7, #36	; 0x24
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	40023800 	.word	0x40023800
 8001034:	40013800 	.word	0x40013800
 8001038:	40020000 	.word	0x40020000
 800103c:	40020400 	.word	0x40020400
 8001040:	40020800 	.word	0x40020800
 8001044:	40020c00 	.word	0x40020c00
 8001048:	40021000 	.word	0x40021000
 800104c:	40021400 	.word	0x40021400
 8001050:	40021800 	.word	0x40021800
 8001054:	40021c00 	.word	0x40021c00
 8001058:	40013c00 	.word	0x40013c00

0800105c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	460b      	mov	r3, r1
 8001066:	807b      	strh	r3, [r7, #2]
 8001068:	4613      	mov	r3, r2
 800106a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800106c:	787b      	ldrb	r3, [r7, #1]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d003      	beq.n	800107a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001072:	887a      	ldrh	r2, [r7, #2]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001078:	e003      	b.n	8001082 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800107a:	887b      	ldrh	r3, [r7, #2]
 800107c:	041a      	lsls	r2, r3, #16
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	619a      	str	r2, [r3, #24]
}
 8001082:	bf00      	nop
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
	...

08001090 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d101      	bne.n	80010a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e264      	b.n	800156c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d075      	beq.n	800119a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010ae:	4ba3      	ldr	r3, [pc, #652]	; (800133c <HAL_RCC_OscConfig+0x2ac>)
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	f003 030c 	and.w	r3, r3, #12
 80010b6:	2b04      	cmp	r3, #4
 80010b8:	d00c      	beq.n	80010d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010ba:	4ba0      	ldr	r3, [pc, #640]	; (800133c <HAL_RCC_OscConfig+0x2ac>)
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010c2:	2b08      	cmp	r3, #8
 80010c4:	d112      	bne.n	80010ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010c6:	4b9d      	ldr	r3, [pc, #628]	; (800133c <HAL_RCC_OscConfig+0x2ac>)
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010d2:	d10b      	bne.n	80010ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010d4:	4b99      	ldr	r3, [pc, #612]	; (800133c <HAL_RCC_OscConfig+0x2ac>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d05b      	beq.n	8001198 <HAL_RCC_OscConfig+0x108>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d157      	bne.n	8001198 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e23f      	b.n	800156c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010f4:	d106      	bne.n	8001104 <HAL_RCC_OscConfig+0x74>
 80010f6:	4b91      	ldr	r3, [pc, #580]	; (800133c <HAL_RCC_OscConfig+0x2ac>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a90      	ldr	r2, [pc, #576]	; (800133c <HAL_RCC_OscConfig+0x2ac>)
 80010fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001100:	6013      	str	r3, [r2, #0]
 8001102:	e01d      	b.n	8001140 <HAL_RCC_OscConfig+0xb0>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800110c:	d10c      	bne.n	8001128 <HAL_RCC_OscConfig+0x98>
 800110e:	4b8b      	ldr	r3, [pc, #556]	; (800133c <HAL_RCC_OscConfig+0x2ac>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a8a      	ldr	r2, [pc, #552]	; (800133c <HAL_RCC_OscConfig+0x2ac>)
 8001114:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001118:	6013      	str	r3, [r2, #0]
 800111a:	4b88      	ldr	r3, [pc, #544]	; (800133c <HAL_RCC_OscConfig+0x2ac>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a87      	ldr	r2, [pc, #540]	; (800133c <HAL_RCC_OscConfig+0x2ac>)
 8001120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001124:	6013      	str	r3, [r2, #0]
 8001126:	e00b      	b.n	8001140 <HAL_RCC_OscConfig+0xb0>
 8001128:	4b84      	ldr	r3, [pc, #528]	; (800133c <HAL_RCC_OscConfig+0x2ac>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a83      	ldr	r2, [pc, #524]	; (800133c <HAL_RCC_OscConfig+0x2ac>)
 800112e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001132:	6013      	str	r3, [r2, #0]
 8001134:	4b81      	ldr	r3, [pc, #516]	; (800133c <HAL_RCC_OscConfig+0x2ac>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a80      	ldr	r2, [pc, #512]	; (800133c <HAL_RCC_OscConfig+0x2ac>)
 800113a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800113e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d013      	beq.n	8001170 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001148:	f7ff fcee 	bl	8000b28 <HAL_GetTick>
 800114c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800114e:	e008      	b.n	8001162 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001150:	f7ff fcea 	bl	8000b28 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	2b64      	cmp	r3, #100	; 0x64
 800115c:	d901      	bls.n	8001162 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800115e:	2303      	movs	r3, #3
 8001160:	e204      	b.n	800156c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001162:	4b76      	ldr	r3, [pc, #472]	; (800133c <HAL_RCC_OscConfig+0x2ac>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d0f0      	beq.n	8001150 <HAL_RCC_OscConfig+0xc0>
 800116e:	e014      	b.n	800119a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001170:	f7ff fcda 	bl	8000b28 <HAL_GetTick>
 8001174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001176:	e008      	b.n	800118a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001178:	f7ff fcd6 	bl	8000b28 <HAL_GetTick>
 800117c:	4602      	mov	r2, r0
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	2b64      	cmp	r3, #100	; 0x64
 8001184:	d901      	bls.n	800118a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001186:	2303      	movs	r3, #3
 8001188:	e1f0      	b.n	800156c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800118a:	4b6c      	ldr	r3, [pc, #432]	; (800133c <HAL_RCC_OscConfig+0x2ac>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d1f0      	bne.n	8001178 <HAL_RCC_OscConfig+0xe8>
 8001196:	e000      	b.n	800119a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001198:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d063      	beq.n	800126e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011a6:	4b65      	ldr	r3, [pc, #404]	; (800133c <HAL_RCC_OscConfig+0x2ac>)
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	f003 030c 	and.w	r3, r3, #12
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d00b      	beq.n	80011ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011b2:	4b62      	ldr	r3, [pc, #392]	; (800133c <HAL_RCC_OscConfig+0x2ac>)
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011ba:	2b08      	cmp	r3, #8
 80011bc:	d11c      	bne.n	80011f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011be:	4b5f      	ldr	r3, [pc, #380]	; (800133c <HAL_RCC_OscConfig+0x2ac>)
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d116      	bne.n	80011f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ca:	4b5c      	ldr	r3, [pc, #368]	; (800133c <HAL_RCC_OscConfig+0x2ac>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d005      	beq.n	80011e2 <HAL_RCC_OscConfig+0x152>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	68db      	ldr	r3, [r3, #12]
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d001      	beq.n	80011e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e1c4      	b.n	800156c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011e2:	4b56      	ldr	r3, [pc, #344]	; (800133c <HAL_RCC_OscConfig+0x2ac>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	691b      	ldr	r3, [r3, #16]
 80011ee:	00db      	lsls	r3, r3, #3
 80011f0:	4952      	ldr	r1, [pc, #328]	; (800133c <HAL_RCC_OscConfig+0x2ac>)
 80011f2:	4313      	orrs	r3, r2
 80011f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011f6:	e03a      	b.n	800126e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d020      	beq.n	8001242 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001200:	4b4f      	ldr	r3, [pc, #316]	; (8001340 <HAL_RCC_OscConfig+0x2b0>)
 8001202:	2201      	movs	r2, #1
 8001204:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001206:	f7ff fc8f 	bl	8000b28 <HAL_GetTick>
 800120a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800120c:	e008      	b.n	8001220 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800120e:	f7ff fc8b 	bl	8000b28 <HAL_GetTick>
 8001212:	4602      	mov	r2, r0
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	2b02      	cmp	r3, #2
 800121a:	d901      	bls.n	8001220 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800121c:	2303      	movs	r3, #3
 800121e:	e1a5      	b.n	800156c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001220:	4b46      	ldr	r3, [pc, #280]	; (800133c <HAL_RCC_OscConfig+0x2ac>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 0302 	and.w	r3, r3, #2
 8001228:	2b00      	cmp	r3, #0
 800122a:	d0f0      	beq.n	800120e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800122c:	4b43      	ldr	r3, [pc, #268]	; (800133c <HAL_RCC_OscConfig+0x2ac>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	691b      	ldr	r3, [r3, #16]
 8001238:	00db      	lsls	r3, r3, #3
 800123a:	4940      	ldr	r1, [pc, #256]	; (800133c <HAL_RCC_OscConfig+0x2ac>)
 800123c:	4313      	orrs	r3, r2
 800123e:	600b      	str	r3, [r1, #0]
 8001240:	e015      	b.n	800126e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001242:	4b3f      	ldr	r3, [pc, #252]	; (8001340 <HAL_RCC_OscConfig+0x2b0>)
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001248:	f7ff fc6e 	bl	8000b28 <HAL_GetTick>
 800124c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800124e:	e008      	b.n	8001262 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001250:	f7ff fc6a 	bl	8000b28 <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	2b02      	cmp	r3, #2
 800125c:	d901      	bls.n	8001262 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	e184      	b.n	800156c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001262:	4b36      	ldr	r3, [pc, #216]	; (800133c <HAL_RCC_OscConfig+0x2ac>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0302 	and.w	r3, r3, #2
 800126a:	2b00      	cmp	r3, #0
 800126c:	d1f0      	bne.n	8001250 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 0308 	and.w	r3, r3, #8
 8001276:	2b00      	cmp	r3, #0
 8001278:	d030      	beq.n	80012dc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	695b      	ldr	r3, [r3, #20]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d016      	beq.n	80012b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001282:	4b30      	ldr	r3, [pc, #192]	; (8001344 <HAL_RCC_OscConfig+0x2b4>)
 8001284:	2201      	movs	r2, #1
 8001286:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001288:	f7ff fc4e 	bl	8000b28 <HAL_GetTick>
 800128c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800128e:	e008      	b.n	80012a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001290:	f7ff fc4a 	bl	8000b28 <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	2b02      	cmp	r3, #2
 800129c:	d901      	bls.n	80012a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800129e:	2303      	movs	r3, #3
 80012a0:	e164      	b.n	800156c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012a2:	4b26      	ldr	r3, [pc, #152]	; (800133c <HAL_RCC_OscConfig+0x2ac>)
 80012a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d0f0      	beq.n	8001290 <HAL_RCC_OscConfig+0x200>
 80012ae:	e015      	b.n	80012dc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012b0:	4b24      	ldr	r3, [pc, #144]	; (8001344 <HAL_RCC_OscConfig+0x2b4>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012b6:	f7ff fc37 	bl	8000b28 <HAL_GetTick>
 80012ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012bc:	e008      	b.n	80012d0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012be:	f7ff fc33 	bl	8000b28 <HAL_GetTick>
 80012c2:	4602      	mov	r2, r0
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d901      	bls.n	80012d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80012cc:	2303      	movs	r3, #3
 80012ce:	e14d      	b.n	800156c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012d0:	4b1a      	ldr	r3, [pc, #104]	; (800133c <HAL_RCC_OscConfig+0x2ac>)
 80012d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012d4:	f003 0302 	and.w	r3, r3, #2
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d1f0      	bne.n	80012be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0304 	and.w	r3, r3, #4
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	f000 80a0 	beq.w	800142a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012ea:	2300      	movs	r3, #0
 80012ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012ee:	4b13      	ldr	r3, [pc, #76]	; (800133c <HAL_RCC_OscConfig+0x2ac>)
 80012f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d10f      	bne.n	800131a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	60bb      	str	r3, [r7, #8]
 80012fe:	4b0f      	ldr	r3, [pc, #60]	; (800133c <HAL_RCC_OscConfig+0x2ac>)
 8001300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001302:	4a0e      	ldr	r2, [pc, #56]	; (800133c <HAL_RCC_OscConfig+0x2ac>)
 8001304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001308:	6413      	str	r3, [r2, #64]	; 0x40
 800130a:	4b0c      	ldr	r3, [pc, #48]	; (800133c <HAL_RCC_OscConfig+0x2ac>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001312:	60bb      	str	r3, [r7, #8]
 8001314:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001316:	2301      	movs	r3, #1
 8001318:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800131a:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <HAL_RCC_OscConfig+0x2b8>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001322:	2b00      	cmp	r3, #0
 8001324:	d121      	bne.n	800136a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001326:	4b08      	ldr	r3, [pc, #32]	; (8001348 <HAL_RCC_OscConfig+0x2b8>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a07      	ldr	r2, [pc, #28]	; (8001348 <HAL_RCC_OscConfig+0x2b8>)
 800132c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001330:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001332:	f7ff fbf9 	bl	8000b28 <HAL_GetTick>
 8001336:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001338:	e011      	b.n	800135e <HAL_RCC_OscConfig+0x2ce>
 800133a:	bf00      	nop
 800133c:	40023800 	.word	0x40023800
 8001340:	42470000 	.word	0x42470000
 8001344:	42470e80 	.word	0x42470e80
 8001348:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800134c:	f7ff fbec 	bl	8000b28 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	2b02      	cmp	r3, #2
 8001358:	d901      	bls.n	800135e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e106      	b.n	800156c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800135e:	4b85      	ldr	r3, [pc, #532]	; (8001574 <HAL_RCC_OscConfig+0x4e4>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001366:	2b00      	cmp	r3, #0
 8001368:	d0f0      	beq.n	800134c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	2b01      	cmp	r3, #1
 8001370:	d106      	bne.n	8001380 <HAL_RCC_OscConfig+0x2f0>
 8001372:	4b81      	ldr	r3, [pc, #516]	; (8001578 <HAL_RCC_OscConfig+0x4e8>)
 8001374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001376:	4a80      	ldr	r2, [pc, #512]	; (8001578 <HAL_RCC_OscConfig+0x4e8>)
 8001378:	f043 0301 	orr.w	r3, r3, #1
 800137c:	6713      	str	r3, [r2, #112]	; 0x70
 800137e:	e01c      	b.n	80013ba <HAL_RCC_OscConfig+0x32a>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	2b05      	cmp	r3, #5
 8001386:	d10c      	bne.n	80013a2 <HAL_RCC_OscConfig+0x312>
 8001388:	4b7b      	ldr	r3, [pc, #492]	; (8001578 <HAL_RCC_OscConfig+0x4e8>)
 800138a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800138c:	4a7a      	ldr	r2, [pc, #488]	; (8001578 <HAL_RCC_OscConfig+0x4e8>)
 800138e:	f043 0304 	orr.w	r3, r3, #4
 8001392:	6713      	str	r3, [r2, #112]	; 0x70
 8001394:	4b78      	ldr	r3, [pc, #480]	; (8001578 <HAL_RCC_OscConfig+0x4e8>)
 8001396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001398:	4a77      	ldr	r2, [pc, #476]	; (8001578 <HAL_RCC_OscConfig+0x4e8>)
 800139a:	f043 0301 	orr.w	r3, r3, #1
 800139e:	6713      	str	r3, [r2, #112]	; 0x70
 80013a0:	e00b      	b.n	80013ba <HAL_RCC_OscConfig+0x32a>
 80013a2:	4b75      	ldr	r3, [pc, #468]	; (8001578 <HAL_RCC_OscConfig+0x4e8>)
 80013a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013a6:	4a74      	ldr	r2, [pc, #464]	; (8001578 <HAL_RCC_OscConfig+0x4e8>)
 80013a8:	f023 0301 	bic.w	r3, r3, #1
 80013ac:	6713      	str	r3, [r2, #112]	; 0x70
 80013ae:	4b72      	ldr	r3, [pc, #456]	; (8001578 <HAL_RCC_OscConfig+0x4e8>)
 80013b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013b2:	4a71      	ldr	r2, [pc, #452]	; (8001578 <HAL_RCC_OscConfig+0x4e8>)
 80013b4:	f023 0304 	bic.w	r3, r3, #4
 80013b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d015      	beq.n	80013ee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013c2:	f7ff fbb1 	bl	8000b28 <HAL_GetTick>
 80013c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013c8:	e00a      	b.n	80013e0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013ca:	f7ff fbad 	bl	8000b28 <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80013d8:	4293      	cmp	r3, r2
 80013da:	d901      	bls.n	80013e0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e0c5      	b.n	800156c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013e0:	4b65      	ldr	r3, [pc, #404]	; (8001578 <HAL_RCC_OscConfig+0x4e8>)
 80013e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013e4:	f003 0302 	and.w	r3, r3, #2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d0ee      	beq.n	80013ca <HAL_RCC_OscConfig+0x33a>
 80013ec:	e014      	b.n	8001418 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ee:	f7ff fb9b 	bl	8000b28 <HAL_GetTick>
 80013f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013f4:	e00a      	b.n	800140c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013f6:	f7ff fb97 	bl	8000b28 <HAL_GetTick>
 80013fa:	4602      	mov	r2, r0
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	f241 3288 	movw	r2, #5000	; 0x1388
 8001404:	4293      	cmp	r3, r2
 8001406:	d901      	bls.n	800140c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	e0af      	b.n	800156c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800140c:	4b5a      	ldr	r3, [pc, #360]	; (8001578 <HAL_RCC_OscConfig+0x4e8>)
 800140e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001410:	f003 0302 	and.w	r3, r3, #2
 8001414:	2b00      	cmp	r3, #0
 8001416:	d1ee      	bne.n	80013f6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001418:	7dfb      	ldrb	r3, [r7, #23]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d105      	bne.n	800142a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800141e:	4b56      	ldr	r3, [pc, #344]	; (8001578 <HAL_RCC_OscConfig+0x4e8>)
 8001420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001422:	4a55      	ldr	r2, [pc, #340]	; (8001578 <HAL_RCC_OscConfig+0x4e8>)
 8001424:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001428:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	699b      	ldr	r3, [r3, #24]
 800142e:	2b00      	cmp	r3, #0
 8001430:	f000 809b 	beq.w	800156a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001434:	4b50      	ldr	r3, [pc, #320]	; (8001578 <HAL_RCC_OscConfig+0x4e8>)
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	f003 030c 	and.w	r3, r3, #12
 800143c:	2b08      	cmp	r3, #8
 800143e:	d05c      	beq.n	80014fa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	2b02      	cmp	r3, #2
 8001446:	d141      	bne.n	80014cc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001448:	4b4c      	ldr	r3, [pc, #304]	; (800157c <HAL_RCC_OscConfig+0x4ec>)
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800144e:	f7ff fb6b 	bl	8000b28 <HAL_GetTick>
 8001452:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001454:	e008      	b.n	8001468 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001456:	f7ff fb67 	bl	8000b28 <HAL_GetTick>
 800145a:	4602      	mov	r2, r0
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	2b02      	cmp	r3, #2
 8001462:	d901      	bls.n	8001468 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e081      	b.n	800156c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001468:	4b43      	ldr	r3, [pc, #268]	; (8001578 <HAL_RCC_OscConfig+0x4e8>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d1f0      	bne.n	8001456 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	69da      	ldr	r2, [r3, #28]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a1b      	ldr	r3, [r3, #32]
 800147c:	431a      	orrs	r2, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001482:	019b      	lsls	r3, r3, #6
 8001484:	431a      	orrs	r2, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800148a:	085b      	lsrs	r3, r3, #1
 800148c:	3b01      	subs	r3, #1
 800148e:	041b      	lsls	r3, r3, #16
 8001490:	431a      	orrs	r2, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001496:	061b      	lsls	r3, r3, #24
 8001498:	4937      	ldr	r1, [pc, #220]	; (8001578 <HAL_RCC_OscConfig+0x4e8>)
 800149a:	4313      	orrs	r3, r2
 800149c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800149e:	4b37      	ldr	r3, [pc, #220]	; (800157c <HAL_RCC_OscConfig+0x4ec>)
 80014a0:	2201      	movs	r2, #1
 80014a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a4:	f7ff fb40 	bl	8000b28 <HAL_GetTick>
 80014a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014aa:	e008      	b.n	80014be <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014ac:	f7ff fb3c 	bl	8000b28 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e056      	b.n	800156c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014be:	4b2e      	ldr	r3, [pc, #184]	; (8001578 <HAL_RCC_OscConfig+0x4e8>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d0f0      	beq.n	80014ac <HAL_RCC_OscConfig+0x41c>
 80014ca:	e04e      	b.n	800156a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014cc:	4b2b      	ldr	r3, [pc, #172]	; (800157c <HAL_RCC_OscConfig+0x4ec>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d2:	f7ff fb29 	bl	8000b28 <HAL_GetTick>
 80014d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014d8:	e008      	b.n	80014ec <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014da:	f7ff fb25 	bl	8000b28 <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d901      	bls.n	80014ec <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e03f      	b.n	800156c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ec:	4b22      	ldr	r3, [pc, #136]	; (8001578 <HAL_RCC_OscConfig+0x4e8>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d1f0      	bne.n	80014da <HAL_RCC_OscConfig+0x44a>
 80014f8:	e037      	b.n	800156a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d101      	bne.n	8001506 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e032      	b.n	800156c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001506:	4b1c      	ldr	r3, [pc, #112]	; (8001578 <HAL_RCC_OscConfig+0x4e8>)
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d028      	beq.n	8001566 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800151e:	429a      	cmp	r2, r3
 8001520:	d121      	bne.n	8001566 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800152c:	429a      	cmp	r2, r3
 800152e:	d11a      	bne.n	8001566 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001530:	68fa      	ldr	r2, [r7, #12]
 8001532:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001536:	4013      	ands	r3, r2
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800153c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800153e:	4293      	cmp	r3, r2
 8001540:	d111      	bne.n	8001566 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800154c:	085b      	lsrs	r3, r3, #1
 800154e:	3b01      	subs	r3, #1
 8001550:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001552:	429a      	cmp	r2, r3
 8001554:	d107      	bne.n	8001566 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001560:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001562:	429a      	cmp	r2, r3
 8001564:	d001      	beq.n	800156a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e000      	b.n	800156c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800156a:	2300      	movs	r3, #0
}
 800156c:	4618      	mov	r0, r3
 800156e:	3718      	adds	r7, #24
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	40007000 	.word	0x40007000
 8001578:	40023800 	.word	0x40023800
 800157c:	42470060 	.word	0x42470060

08001580 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d101      	bne.n	8001594 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e0cc      	b.n	800172e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001594:	4b68      	ldr	r3, [pc, #416]	; (8001738 <HAL_RCC_ClockConfig+0x1b8>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0307 	and.w	r3, r3, #7
 800159c:	683a      	ldr	r2, [r7, #0]
 800159e:	429a      	cmp	r2, r3
 80015a0:	d90c      	bls.n	80015bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015a2:	4b65      	ldr	r3, [pc, #404]	; (8001738 <HAL_RCC_ClockConfig+0x1b8>)
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	b2d2      	uxtb	r2, r2
 80015a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015aa:	4b63      	ldr	r3, [pc, #396]	; (8001738 <HAL_RCC_ClockConfig+0x1b8>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0307 	and.w	r3, r3, #7
 80015b2:	683a      	ldr	r2, [r7, #0]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d001      	beq.n	80015bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e0b8      	b.n	800172e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d020      	beq.n	800160a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0304 	and.w	r3, r3, #4
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d005      	beq.n	80015e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015d4:	4b59      	ldr	r3, [pc, #356]	; (800173c <HAL_RCC_ClockConfig+0x1bc>)
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	4a58      	ldr	r2, [pc, #352]	; (800173c <HAL_RCC_ClockConfig+0x1bc>)
 80015da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0308 	and.w	r3, r3, #8
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d005      	beq.n	80015f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015ec:	4b53      	ldr	r3, [pc, #332]	; (800173c <HAL_RCC_ClockConfig+0x1bc>)
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	4a52      	ldr	r2, [pc, #328]	; (800173c <HAL_RCC_ClockConfig+0x1bc>)
 80015f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015f8:	4b50      	ldr	r3, [pc, #320]	; (800173c <HAL_RCC_ClockConfig+0x1bc>)
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	494d      	ldr	r1, [pc, #308]	; (800173c <HAL_RCC_ClockConfig+0x1bc>)
 8001606:	4313      	orrs	r3, r2
 8001608:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	2b00      	cmp	r3, #0
 8001614:	d044      	beq.n	80016a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	2b01      	cmp	r3, #1
 800161c:	d107      	bne.n	800162e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800161e:	4b47      	ldr	r3, [pc, #284]	; (800173c <HAL_RCC_ClockConfig+0x1bc>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d119      	bne.n	800165e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e07f      	b.n	800172e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	2b02      	cmp	r3, #2
 8001634:	d003      	beq.n	800163e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800163a:	2b03      	cmp	r3, #3
 800163c:	d107      	bne.n	800164e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800163e:	4b3f      	ldr	r3, [pc, #252]	; (800173c <HAL_RCC_ClockConfig+0x1bc>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d109      	bne.n	800165e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e06f      	b.n	800172e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800164e:	4b3b      	ldr	r3, [pc, #236]	; (800173c <HAL_RCC_ClockConfig+0x1bc>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d101      	bne.n	800165e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e067      	b.n	800172e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800165e:	4b37      	ldr	r3, [pc, #220]	; (800173c <HAL_RCC_ClockConfig+0x1bc>)
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	f023 0203 	bic.w	r2, r3, #3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	4934      	ldr	r1, [pc, #208]	; (800173c <HAL_RCC_ClockConfig+0x1bc>)
 800166c:	4313      	orrs	r3, r2
 800166e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001670:	f7ff fa5a 	bl	8000b28 <HAL_GetTick>
 8001674:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001676:	e00a      	b.n	800168e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001678:	f7ff fa56 	bl	8000b28 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	f241 3288 	movw	r2, #5000	; 0x1388
 8001686:	4293      	cmp	r3, r2
 8001688:	d901      	bls.n	800168e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e04f      	b.n	800172e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800168e:	4b2b      	ldr	r3, [pc, #172]	; (800173c <HAL_RCC_ClockConfig+0x1bc>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f003 020c 	and.w	r2, r3, #12
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	429a      	cmp	r2, r3
 800169e:	d1eb      	bne.n	8001678 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016a0:	4b25      	ldr	r3, [pc, #148]	; (8001738 <HAL_RCC_ClockConfig+0x1b8>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0307 	and.w	r3, r3, #7
 80016a8:	683a      	ldr	r2, [r7, #0]
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d20c      	bcs.n	80016c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ae:	4b22      	ldr	r3, [pc, #136]	; (8001738 <HAL_RCC_ClockConfig+0x1b8>)
 80016b0:	683a      	ldr	r2, [r7, #0]
 80016b2:	b2d2      	uxtb	r2, r2
 80016b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016b6:	4b20      	ldr	r3, [pc, #128]	; (8001738 <HAL_RCC_ClockConfig+0x1b8>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0307 	and.w	r3, r3, #7
 80016be:	683a      	ldr	r2, [r7, #0]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d001      	beq.n	80016c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e032      	b.n	800172e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0304 	and.w	r3, r3, #4
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d008      	beq.n	80016e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016d4:	4b19      	ldr	r3, [pc, #100]	; (800173c <HAL_RCC_ClockConfig+0x1bc>)
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	4916      	ldr	r1, [pc, #88]	; (800173c <HAL_RCC_ClockConfig+0x1bc>)
 80016e2:	4313      	orrs	r3, r2
 80016e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0308 	and.w	r3, r3, #8
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d009      	beq.n	8001706 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016f2:	4b12      	ldr	r3, [pc, #72]	; (800173c <HAL_RCC_ClockConfig+0x1bc>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	691b      	ldr	r3, [r3, #16]
 80016fe:	00db      	lsls	r3, r3, #3
 8001700:	490e      	ldr	r1, [pc, #56]	; (800173c <HAL_RCC_ClockConfig+0x1bc>)
 8001702:	4313      	orrs	r3, r2
 8001704:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001706:	f000 f821 	bl	800174c <HAL_RCC_GetSysClockFreq>
 800170a:	4602      	mov	r2, r0
 800170c:	4b0b      	ldr	r3, [pc, #44]	; (800173c <HAL_RCC_ClockConfig+0x1bc>)
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	091b      	lsrs	r3, r3, #4
 8001712:	f003 030f 	and.w	r3, r3, #15
 8001716:	490a      	ldr	r1, [pc, #40]	; (8001740 <HAL_RCC_ClockConfig+0x1c0>)
 8001718:	5ccb      	ldrb	r3, [r1, r3]
 800171a:	fa22 f303 	lsr.w	r3, r2, r3
 800171e:	4a09      	ldr	r2, [pc, #36]	; (8001744 <HAL_RCC_ClockConfig+0x1c4>)
 8001720:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001722:	4b09      	ldr	r3, [pc, #36]	; (8001748 <HAL_RCC_ClockConfig+0x1c8>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4618      	mov	r0, r3
 8001728:	f7ff f9ba 	bl	8000aa0 <HAL_InitTick>

  return HAL_OK;
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40023c00 	.word	0x40023c00
 800173c:	40023800 	.word	0x40023800
 8001740:	08001e28 	.word	0x08001e28
 8001744:	20000000 	.word	0x20000000
 8001748:	20000004 	.word	0x20000004

0800174c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800174c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001750:	b084      	sub	sp, #16
 8001752:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001754:	2300      	movs	r3, #0
 8001756:	607b      	str	r3, [r7, #4]
 8001758:	2300      	movs	r3, #0
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	2300      	movs	r3, #0
 800175e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001760:	2300      	movs	r3, #0
 8001762:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001764:	4b67      	ldr	r3, [pc, #412]	; (8001904 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	f003 030c 	and.w	r3, r3, #12
 800176c:	2b08      	cmp	r3, #8
 800176e:	d00d      	beq.n	800178c <HAL_RCC_GetSysClockFreq+0x40>
 8001770:	2b08      	cmp	r3, #8
 8001772:	f200 80bd 	bhi.w	80018f0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001776:	2b00      	cmp	r3, #0
 8001778:	d002      	beq.n	8001780 <HAL_RCC_GetSysClockFreq+0x34>
 800177a:	2b04      	cmp	r3, #4
 800177c:	d003      	beq.n	8001786 <HAL_RCC_GetSysClockFreq+0x3a>
 800177e:	e0b7      	b.n	80018f0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001780:	4b61      	ldr	r3, [pc, #388]	; (8001908 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001782:	60bb      	str	r3, [r7, #8]
       break;
 8001784:	e0b7      	b.n	80018f6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001786:	4b61      	ldr	r3, [pc, #388]	; (800190c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001788:	60bb      	str	r3, [r7, #8]
      break;
 800178a:	e0b4      	b.n	80018f6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800178c:	4b5d      	ldr	r3, [pc, #372]	; (8001904 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001794:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001796:	4b5b      	ldr	r3, [pc, #364]	; (8001904 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d04d      	beq.n	800183e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017a2:	4b58      	ldr	r3, [pc, #352]	; (8001904 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	099b      	lsrs	r3, r3, #6
 80017a8:	461a      	mov	r2, r3
 80017aa:	f04f 0300 	mov.w	r3, #0
 80017ae:	f240 10ff 	movw	r0, #511	; 0x1ff
 80017b2:	f04f 0100 	mov.w	r1, #0
 80017b6:	ea02 0800 	and.w	r8, r2, r0
 80017ba:	ea03 0901 	and.w	r9, r3, r1
 80017be:	4640      	mov	r0, r8
 80017c0:	4649      	mov	r1, r9
 80017c2:	f04f 0200 	mov.w	r2, #0
 80017c6:	f04f 0300 	mov.w	r3, #0
 80017ca:	014b      	lsls	r3, r1, #5
 80017cc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80017d0:	0142      	lsls	r2, r0, #5
 80017d2:	4610      	mov	r0, r2
 80017d4:	4619      	mov	r1, r3
 80017d6:	ebb0 0008 	subs.w	r0, r0, r8
 80017da:	eb61 0109 	sbc.w	r1, r1, r9
 80017de:	f04f 0200 	mov.w	r2, #0
 80017e2:	f04f 0300 	mov.w	r3, #0
 80017e6:	018b      	lsls	r3, r1, #6
 80017e8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80017ec:	0182      	lsls	r2, r0, #6
 80017ee:	1a12      	subs	r2, r2, r0
 80017f0:	eb63 0301 	sbc.w	r3, r3, r1
 80017f4:	f04f 0000 	mov.w	r0, #0
 80017f8:	f04f 0100 	mov.w	r1, #0
 80017fc:	00d9      	lsls	r1, r3, #3
 80017fe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001802:	00d0      	lsls	r0, r2, #3
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	eb12 0208 	adds.w	r2, r2, r8
 800180c:	eb43 0309 	adc.w	r3, r3, r9
 8001810:	f04f 0000 	mov.w	r0, #0
 8001814:	f04f 0100 	mov.w	r1, #0
 8001818:	0259      	lsls	r1, r3, #9
 800181a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800181e:	0250      	lsls	r0, r2, #9
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	4610      	mov	r0, r2
 8001826:	4619      	mov	r1, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	461a      	mov	r2, r3
 800182c:	f04f 0300 	mov.w	r3, #0
 8001830:	f7fe fcca 	bl	80001c8 <__aeabi_uldivmod>
 8001834:	4602      	mov	r2, r0
 8001836:	460b      	mov	r3, r1
 8001838:	4613      	mov	r3, r2
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	e04a      	b.n	80018d4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800183e:	4b31      	ldr	r3, [pc, #196]	; (8001904 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	099b      	lsrs	r3, r3, #6
 8001844:	461a      	mov	r2, r3
 8001846:	f04f 0300 	mov.w	r3, #0
 800184a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800184e:	f04f 0100 	mov.w	r1, #0
 8001852:	ea02 0400 	and.w	r4, r2, r0
 8001856:	ea03 0501 	and.w	r5, r3, r1
 800185a:	4620      	mov	r0, r4
 800185c:	4629      	mov	r1, r5
 800185e:	f04f 0200 	mov.w	r2, #0
 8001862:	f04f 0300 	mov.w	r3, #0
 8001866:	014b      	lsls	r3, r1, #5
 8001868:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800186c:	0142      	lsls	r2, r0, #5
 800186e:	4610      	mov	r0, r2
 8001870:	4619      	mov	r1, r3
 8001872:	1b00      	subs	r0, r0, r4
 8001874:	eb61 0105 	sbc.w	r1, r1, r5
 8001878:	f04f 0200 	mov.w	r2, #0
 800187c:	f04f 0300 	mov.w	r3, #0
 8001880:	018b      	lsls	r3, r1, #6
 8001882:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001886:	0182      	lsls	r2, r0, #6
 8001888:	1a12      	subs	r2, r2, r0
 800188a:	eb63 0301 	sbc.w	r3, r3, r1
 800188e:	f04f 0000 	mov.w	r0, #0
 8001892:	f04f 0100 	mov.w	r1, #0
 8001896:	00d9      	lsls	r1, r3, #3
 8001898:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800189c:	00d0      	lsls	r0, r2, #3
 800189e:	4602      	mov	r2, r0
 80018a0:	460b      	mov	r3, r1
 80018a2:	1912      	adds	r2, r2, r4
 80018a4:	eb45 0303 	adc.w	r3, r5, r3
 80018a8:	f04f 0000 	mov.w	r0, #0
 80018ac:	f04f 0100 	mov.w	r1, #0
 80018b0:	0299      	lsls	r1, r3, #10
 80018b2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80018b6:	0290      	lsls	r0, r2, #10
 80018b8:	4602      	mov	r2, r0
 80018ba:	460b      	mov	r3, r1
 80018bc:	4610      	mov	r0, r2
 80018be:	4619      	mov	r1, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	461a      	mov	r2, r3
 80018c4:	f04f 0300 	mov.w	r3, #0
 80018c8:	f7fe fc7e 	bl	80001c8 <__aeabi_uldivmod>
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	4613      	mov	r3, r2
 80018d2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018d4:	4b0b      	ldr	r3, [pc, #44]	; (8001904 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	0c1b      	lsrs	r3, r3, #16
 80018da:	f003 0303 	and.w	r3, r3, #3
 80018de:	3301      	adds	r3, #1
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80018e4:	68fa      	ldr	r2, [r7, #12]
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ec:	60bb      	str	r3, [r7, #8]
      break;
 80018ee:	e002      	b.n	80018f6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018f0:	4b05      	ldr	r3, [pc, #20]	; (8001908 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80018f2:	60bb      	str	r3, [r7, #8]
      break;
 80018f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018f6:	68bb      	ldr	r3, [r7, #8]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3710      	adds	r7, #16
 80018fc:	46bd      	mov	sp, r7
 80018fe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001902:	bf00      	nop
 8001904:	40023800 	.word	0x40023800
 8001908:	00f42400 	.word	0x00f42400
 800190c:	007a1200 	.word	0x007a1200

08001910 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800191c:	2300      	movs	r3, #0
 800191e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0301 	and.w	r3, r3, #1
 8001928:	2b00      	cmp	r3, #0
 800192a:	d105      	bne.n	8001938 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001934:	2b00      	cmp	r3, #0
 8001936:	d035      	beq.n	80019a4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001938:	4b62      	ldr	r3, [pc, #392]	; (8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800193e:	f7ff f8f3 	bl	8000b28 <HAL_GetTick>
 8001942:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001944:	e008      	b.n	8001958 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001946:	f7ff f8ef 	bl	8000b28 <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d901      	bls.n	8001958 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e0b0      	b.n	8001aba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001958:	4b5b      	ldr	r3, [pc, #364]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d1f0      	bne.n	8001946 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	019a      	lsls	r2, r3, #6
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	071b      	lsls	r3, r3, #28
 8001970:	4955      	ldr	r1, [pc, #340]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001972:	4313      	orrs	r3, r2
 8001974:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001978:	4b52      	ldr	r3, [pc, #328]	; (8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800197a:	2201      	movs	r2, #1
 800197c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800197e:	f7ff f8d3 	bl	8000b28 <HAL_GetTick>
 8001982:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001984:	e008      	b.n	8001998 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001986:	f7ff f8cf 	bl	8000b28 <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d901      	bls.n	8001998 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e090      	b.n	8001aba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001998:	4b4b      	ldr	r3, [pc, #300]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d0f0      	beq.n	8001986 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	f000 8083 	beq.w	8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	4b44      	ldr	r3, [pc, #272]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80019b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ba:	4a43      	ldr	r2, [pc, #268]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80019bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c0:	6413      	str	r3, [r2, #64]	; 0x40
 80019c2:	4b41      	ldr	r3, [pc, #260]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80019c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80019ce:	4b3f      	ldr	r3, [pc, #252]	; (8001acc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a3e      	ldr	r2, [pc, #248]	; (8001acc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80019d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019d8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80019da:	f7ff f8a5 	bl	8000b28 <HAL_GetTick>
 80019de:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80019e0:	e008      	b.n	80019f4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80019e2:	f7ff f8a1 	bl	8000b28 <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d901      	bls.n	80019f4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e062      	b.n	8001aba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80019f4:	4b35      	ldr	r3, [pc, #212]	; (8001acc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d0f0      	beq.n	80019e2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001a00:	4b31      	ldr	r3, [pc, #196]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a08:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d02f      	beq.n	8001a70 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d028      	beq.n	8001a70 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a1e:	4b2a      	ldr	r3, [pc, #168]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a26:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a28:	4b29      	ldr	r3, [pc, #164]	; (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a2e:	4b28      	ldr	r3, [pc, #160]	; (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001a34:	4a24      	ldr	r2, [pc, #144]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001a3a:	4b23      	ldr	r3, [pc, #140]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d114      	bne.n	8001a70 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001a46:	f7ff f86f 	bl	8000b28 <HAL_GetTick>
 8001a4a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a4c:	e00a      	b.n	8001a64 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a4e:	f7ff f86b 	bl	8000b28 <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e02a      	b.n	8001aba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a64:	4b18      	ldr	r3, [pc, #96]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a68:	f003 0302 	and.w	r3, r3, #2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d0ee      	beq.n	8001a4e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001a7c:	d10d      	bne.n	8001a9a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8001a7e:	4b12      	ldr	r3, [pc, #72]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001a8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a92:	490d      	ldr	r1, [pc, #52]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001a94:	4313      	orrs	r3, r2
 8001a96:	608b      	str	r3, [r1, #8]
 8001a98:	e005      	b.n	8001aa6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8001a9a:	4b0b      	ldr	r3, [pc, #44]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	4a0a      	ldr	r2, [pc, #40]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001aa0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001aa4:	6093      	str	r3, [r2, #8]
 8001aa6:	4b08      	ldr	r3, [pc, #32]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001aa8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ab2:	4905      	ldr	r1, [pc, #20]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3718      	adds	r7, #24
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	42470068 	.word	0x42470068
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	40007000 	.word	0x40007000
 8001ad0:	42470e40 	.word	0x42470e40

08001ad4 <_ZN15QAD_GPIO_OutputC1EP12GPIO_TypeDeft>:
//QAD_GPIO_Output Constructor
//
//This method will initialize the required GPIO pin in Push Pull mode, with Pull Up and Pull Down resistors disabled, and in low speed mode
//pGPIO - The GPIO port for the required pin. A member of GPIO_TypeDef as defined in stm32f407xx.h
//uPin  - The pin number for the required pin. A member of GPIO_pins_define as defined in stm32f4xx_hal_gpio.h
QAD_GPIO_Output::QAD_GPIO_Output(GPIO_TypeDef* pGPIO, uint16_t uPin) :
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	80fb      	strh	r3, [r7, #6]
	m_pGPIO(pGPIO),
	m_uPin(uPin),
	m_eOutputMode(QAD_GPIO_OutputMode_PushPull),
	m_ePullMode(QAD_GPIO_PullMode_NoPull),
	m_eSpeed(QAD_GPIO_Speed_Low),
	m_eState(QAD_GPIO_PinState_Off) {
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	68ba      	ldr	r2, [r7, #8]
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	88fa      	ldrh	r2, [r7, #6]
 8001aec:	809a      	strh	r2, [r3, #4]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2200      	movs	r2, #0
 8001af2:	719a      	strb	r2, [r3, #6]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2200      	movs	r2, #0
 8001af8:	609a      	str	r2, [r3, #8]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2200      	movs	r2, #0
 8001afe:	60da      	str	r2, [r3, #12]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2200      	movs	r2, #0
 8001b04:	741a      	strb	r2, [r3, #16]

	//Initialize the GPIO Pin
  periphInit();
 8001b06:	68f8      	ldr	r0, [r7, #12]
 8001b08:	f000 f841 	bl	8001b8e <_ZN15QAD_GPIO_Output10periphInitEv>
}
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3710      	adds	r7, #16
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <_ZN15QAD_GPIO_Output2onEv>:

//QAD_GPIO_Output::on
//QAD_GPIO_Output Control Method
//
//Used to turn the GPIO pin on
void QAD_GPIO_Output::on(void) {
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b082      	sub	sp, #8
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(m_pGPIO, m_uPin, GPIO_PIN_SET);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6818      	ldr	r0, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	889b      	ldrh	r3, [r3, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	4619      	mov	r1, r3
 8001b2a:	f7ff fa97 	bl	800105c <HAL_GPIO_WritePin>
	m_eState = QAD_GPIO_PinState_On;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2201      	movs	r2, #1
 8001b32:	741a      	strb	r2, [r3, #16]
}
 8001b34:	bf00      	nop
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <_ZN15QAD_GPIO_Output3offEv>:

//QAD_GPIO_Output::off
//QAD_GPIO_Output Control Method
//
//Used to turn the GPIO pin off
void QAD_GPIO_Output::off(void) {
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(m_pGPIO, m_uPin, GPIO_PIN_RESET);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6818      	ldr	r0, [r3, #0]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	889b      	ldrh	r3, [r3, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	4619      	mov	r1, r3
 8001b50:	f7ff fa84 	bl	800105c <HAL_GPIO_WritePin>
	m_eState = QAD_GPIO_PinState_Off;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	741a      	strb	r2, [r3, #16]
}
 8001b5a:	bf00      	nop
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <_ZN15QAD_GPIO_Output6toggleEv>:

//QAD_GPIO_Output::toggle
//QAD_GPIO_Output Control Method
//
//Used to toggle the state of the GPIO pin (will turn off if currently on, or turn on if currently off)
void QAD_GPIO_Output::toggle(void) {
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b082      	sub	sp, #8
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]

	switch (m_eState) {
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	7c1b      	ldrb	r3, [r3, #16]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d005      	beq.n	8001b7e <_ZN15QAD_GPIO_Output6toggleEv+0x1c>
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d107      	bne.n	8001b86 <_ZN15QAD_GPIO_Output6toggleEv+0x24>
	  case (QAD_GPIO_PinState_On):
	  	off();
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f7ff ffe0 	bl	8001b3c <_ZN15QAD_GPIO_Output3offEv>
	    break;
 8001b7c:	e003      	b.n	8001b86 <_ZN15QAD_GPIO_Output6toggleEv+0x24>
	  case (QAD_GPIO_PinState_Off):
	  	on();
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f7ff ffc9 	bl	8001b16 <_ZN15QAD_GPIO_Output2onEv>
	    break;
 8001b84:	bf00      	nop
	}
}
 8001b86:	bf00      	nop
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <_ZN15QAD_GPIO_Output10periphInitEv>:
//QAD_GPIO_Output::periphInit
//QAD_GPIO_Output Private Initialization Method
//
//Used to initialize the GPIO Pin based on the currently selected settings
//Specifically to be called by device class constructors and methods used for changing settings
void QAD_GPIO_Output::periphInit(void) {
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b088      	sub	sp, #32
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_Init = {0};
 8001b96:	f107 030c 	add.w	r3, r7, #12
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	605a      	str	r2, [r3, #4]
 8001ba0:	609a      	str	r2, [r3, #8]
 8001ba2:	60da      	str	r2, [r3, #12]
 8001ba4:	611a      	str	r2, [r3, #16]
	GPIO_Init.Pin    = m_uPin;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	889b      	ldrh	r3, [r3, #4]
 8001baa:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode   = m_eOutputMode ? GPIO_MODE_OUTPUT_OD : GPIO_MODE_OUTPUT_PP;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	799b      	ldrb	r3, [r3, #6]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <_ZN15QAD_GPIO_Output10periphInitEv+0x2a>
 8001bb4:	2311      	movs	r3, #17
 8001bb6:	e000      	b.n	8001bba <_ZN15QAD_GPIO_Output10periphInitEv+0x2c>
 8001bb8:	2301      	movs	r3, #1
 8001bba:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull   = m_ePullMode;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed  = m_eSpeed;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(m_pGPIO, &GPIO_Init);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f107 020c 	add.w	r2, r7, #12
 8001bd0:	4611      	mov	r1, r2
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff f8a6 	bl	8000d24 <HAL_GPIO_Init>
}
 8001bd8:	bf00      	nop
 8001bda:	3720      	adds	r7, #32
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <_Znwj>:
 8001be0:	2801      	cmp	r0, #1
 8001be2:	bf38      	it	cc
 8001be4:	2001      	movcc	r0, #1
 8001be6:	b510      	push	{r4, lr}
 8001be8:	4604      	mov	r4, r0
 8001bea:	4620      	mov	r0, r4
 8001bec:	f000 f844 	bl	8001c78 <malloc>
 8001bf0:	b930      	cbnz	r0, 8001c00 <_Znwj+0x20>
 8001bf2:	f000 f807 	bl	8001c04 <_ZSt15get_new_handlerv>
 8001bf6:	b908      	cbnz	r0, 8001bfc <_Znwj+0x1c>
 8001bf8:	f000 f80c 	bl	8001c14 <abort>
 8001bfc:	4780      	blx	r0
 8001bfe:	e7f4      	b.n	8001bea <_Znwj+0xa>
 8001c00:	bd10      	pop	{r4, pc}
	...

08001c04 <_ZSt15get_new_handlerv>:
 8001c04:	4b02      	ldr	r3, [pc, #8]	; (8001c10 <_ZSt15get_new_handlerv+0xc>)
 8001c06:	6818      	ldr	r0, [r3, #0]
 8001c08:	f3bf 8f5b 	dmb	ish
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	200000a0 	.word	0x200000a0

08001c14 <abort>:
 8001c14:	b508      	push	{r3, lr}
 8001c16:	2006      	movs	r0, #6
 8001c18:	f000 f8d0 	bl	8001dbc <raise>
 8001c1c:	2001      	movs	r0, #1
 8001c1e:	f7fe feed 	bl	80009fc <_exit>
	...

08001c24 <__errno>:
 8001c24:	4b01      	ldr	r3, [pc, #4]	; (8001c2c <__errno+0x8>)
 8001c26:	6818      	ldr	r0, [r3, #0]
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	2000000c 	.word	0x2000000c

08001c30 <__libc_init_array>:
 8001c30:	b570      	push	{r4, r5, r6, lr}
 8001c32:	4d0d      	ldr	r5, [pc, #52]	; (8001c68 <__libc_init_array+0x38>)
 8001c34:	4c0d      	ldr	r4, [pc, #52]	; (8001c6c <__libc_init_array+0x3c>)
 8001c36:	1b64      	subs	r4, r4, r5
 8001c38:	10a4      	asrs	r4, r4, #2
 8001c3a:	2600      	movs	r6, #0
 8001c3c:	42a6      	cmp	r6, r4
 8001c3e:	d109      	bne.n	8001c54 <__libc_init_array+0x24>
 8001c40:	4d0b      	ldr	r5, [pc, #44]	; (8001c70 <__libc_init_array+0x40>)
 8001c42:	4c0c      	ldr	r4, [pc, #48]	; (8001c74 <__libc_init_array+0x44>)
 8001c44:	f000 f8e4 	bl	8001e10 <_init>
 8001c48:	1b64      	subs	r4, r4, r5
 8001c4a:	10a4      	asrs	r4, r4, #2
 8001c4c:	2600      	movs	r6, #0
 8001c4e:	42a6      	cmp	r6, r4
 8001c50:	d105      	bne.n	8001c5e <__libc_init_array+0x2e>
 8001c52:	bd70      	pop	{r4, r5, r6, pc}
 8001c54:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c58:	4798      	blx	r3
 8001c5a:	3601      	adds	r6, #1
 8001c5c:	e7ee      	b.n	8001c3c <__libc_init_array+0xc>
 8001c5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c62:	4798      	blx	r3
 8001c64:	3601      	adds	r6, #1
 8001c66:	e7f2      	b.n	8001c4e <__libc_init_array+0x1e>
 8001c68:	08001e40 	.word	0x08001e40
 8001c6c:	08001e40 	.word	0x08001e40
 8001c70:	08001e40 	.word	0x08001e40
 8001c74:	08001e44 	.word	0x08001e44

08001c78 <malloc>:
 8001c78:	4b02      	ldr	r3, [pc, #8]	; (8001c84 <malloc+0xc>)
 8001c7a:	4601      	mov	r1, r0
 8001c7c:	6818      	ldr	r0, [r3, #0]
 8001c7e:	f000 b80b 	b.w	8001c98 <_malloc_r>
 8001c82:	bf00      	nop
 8001c84:	2000000c 	.word	0x2000000c

08001c88 <memset>:
 8001c88:	4402      	add	r2, r0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d100      	bne.n	8001c92 <memset+0xa>
 8001c90:	4770      	bx	lr
 8001c92:	f803 1b01 	strb.w	r1, [r3], #1
 8001c96:	e7f9      	b.n	8001c8c <memset+0x4>

08001c98 <_malloc_r>:
 8001c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c9a:	1ccd      	adds	r5, r1, #3
 8001c9c:	f025 0503 	bic.w	r5, r5, #3
 8001ca0:	3508      	adds	r5, #8
 8001ca2:	2d0c      	cmp	r5, #12
 8001ca4:	bf38      	it	cc
 8001ca6:	250c      	movcc	r5, #12
 8001ca8:	2d00      	cmp	r5, #0
 8001caa:	4606      	mov	r6, r0
 8001cac:	db01      	blt.n	8001cb2 <_malloc_r+0x1a>
 8001cae:	42a9      	cmp	r1, r5
 8001cb0:	d903      	bls.n	8001cba <_malloc_r+0x22>
 8001cb2:	230c      	movs	r3, #12
 8001cb4:	6033      	str	r3, [r6, #0]
 8001cb6:	2000      	movs	r0, #0
 8001cb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001cba:	f000 f89b 	bl	8001df4 <__malloc_lock>
 8001cbe:	4921      	ldr	r1, [pc, #132]	; (8001d44 <_malloc_r+0xac>)
 8001cc0:	680a      	ldr	r2, [r1, #0]
 8001cc2:	4614      	mov	r4, r2
 8001cc4:	b99c      	cbnz	r4, 8001cee <_malloc_r+0x56>
 8001cc6:	4f20      	ldr	r7, [pc, #128]	; (8001d48 <_malloc_r+0xb0>)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	b923      	cbnz	r3, 8001cd6 <_malloc_r+0x3e>
 8001ccc:	4621      	mov	r1, r4
 8001cce:	4630      	mov	r0, r6
 8001cd0:	f000 f83c 	bl	8001d4c <_sbrk_r>
 8001cd4:	6038      	str	r0, [r7, #0]
 8001cd6:	4629      	mov	r1, r5
 8001cd8:	4630      	mov	r0, r6
 8001cda:	f000 f837 	bl	8001d4c <_sbrk_r>
 8001cde:	1c43      	adds	r3, r0, #1
 8001ce0:	d123      	bne.n	8001d2a <_malloc_r+0x92>
 8001ce2:	230c      	movs	r3, #12
 8001ce4:	6033      	str	r3, [r6, #0]
 8001ce6:	4630      	mov	r0, r6
 8001ce8:	f000 f88a 	bl	8001e00 <__malloc_unlock>
 8001cec:	e7e3      	b.n	8001cb6 <_malloc_r+0x1e>
 8001cee:	6823      	ldr	r3, [r4, #0]
 8001cf0:	1b5b      	subs	r3, r3, r5
 8001cf2:	d417      	bmi.n	8001d24 <_malloc_r+0x8c>
 8001cf4:	2b0b      	cmp	r3, #11
 8001cf6:	d903      	bls.n	8001d00 <_malloc_r+0x68>
 8001cf8:	6023      	str	r3, [r4, #0]
 8001cfa:	441c      	add	r4, r3
 8001cfc:	6025      	str	r5, [r4, #0]
 8001cfe:	e004      	b.n	8001d0a <_malloc_r+0x72>
 8001d00:	6863      	ldr	r3, [r4, #4]
 8001d02:	42a2      	cmp	r2, r4
 8001d04:	bf0c      	ite	eq
 8001d06:	600b      	streq	r3, [r1, #0]
 8001d08:	6053      	strne	r3, [r2, #4]
 8001d0a:	4630      	mov	r0, r6
 8001d0c:	f000 f878 	bl	8001e00 <__malloc_unlock>
 8001d10:	f104 000b 	add.w	r0, r4, #11
 8001d14:	1d23      	adds	r3, r4, #4
 8001d16:	f020 0007 	bic.w	r0, r0, #7
 8001d1a:	1ac2      	subs	r2, r0, r3
 8001d1c:	d0cc      	beq.n	8001cb8 <_malloc_r+0x20>
 8001d1e:	1a1b      	subs	r3, r3, r0
 8001d20:	50a3      	str	r3, [r4, r2]
 8001d22:	e7c9      	b.n	8001cb8 <_malloc_r+0x20>
 8001d24:	4622      	mov	r2, r4
 8001d26:	6864      	ldr	r4, [r4, #4]
 8001d28:	e7cc      	b.n	8001cc4 <_malloc_r+0x2c>
 8001d2a:	1cc4      	adds	r4, r0, #3
 8001d2c:	f024 0403 	bic.w	r4, r4, #3
 8001d30:	42a0      	cmp	r0, r4
 8001d32:	d0e3      	beq.n	8001cfc <_malloc_r+0x64>
 8001d34:	1a21      	subs	r1, r4, r0
 8001d36:	4630      	mov	r0, r6
 8001d38:	f000 f808 	bl	8001d4c <_sbrk_r>
 8001d3c:	3001      	adds	r0, #1
 8001d3e:	d1dd      	bne.n	8001cfc <_malloc_r+0x64>
 8001d40:	e7cf      	b.n	8001ce2 <_malloc_r+0x4a>
 8001d42:	bf00      	nop
 8001d44:	200000a4 	.word	0x200000a4
 8001d48:	200000a8 	.word	0x200000a8

08001d4c <_sbrk_r>:
 8001d4c:	b538      	push	{r3, r4, r5, lr}
 8001d4e:	4d06      	ldr	r5, [pc, #24]	; (8001d68 <_sbrk_r+0x1c>)
 8001d50:	2300      	movs	r3, #0
 8001d52:	4604      	mov	r4, r0
 8001d54:	4608      	mov	r0, r1
 8001d56:	602b      	str	r3, [r5, #0]
 8001d58:	f7fe fe5a 	bl	8000a10 <_sbrk>
 8001d5c:	1c43      	adds	r3, r0, #1
 8001d5e:	d102      	bne.n	8001d66 <_sbrk_r+0x1a>
 8001d60:	682b      	ldr	r3, [r5, #0]
 8001d62:	b103      	cbz	r3, 8001d66 <_sbrk_r+0x1a>
 8001d64:	6023      	str	r3, [r4, #0]
 8001d66:	bd38      	pop	{r3, r4, r5, pc}
 8001d68:	200000b0 	.word	0x200000b0

08001d6c <_raise_r>:
 8001d6c:	291f      	cmp	r1, #31
 8001d6e:	b538      	push	{r3, r4, r5, lr}
 8001d70:	4604      	mov	r4, r0
 8001d72:	460d      	mov	r5, r1
 8001d74:	d904      	bls.n	8001d80 <_raise_r+0x14>
 8001d76:	2316      	movs	r3, #22
 8001d78:	6003      	str	r3, [r0, #0]
 8001d7a:	f04f 30ff 	mov.w	r0, #4294967295
 8001d7e:	bd38      	pop	{r3, r4, r5, pc}
 8001d80:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001d82:	b112      	cbz	r2, 8001d8a <_raise_r+0x1e>
 8001d84:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8001d88:	b94b      	cbnz	r3, 8001d9e <_raise_r+0x32>
 8001d8a:	4620      	mov	r0, r4
 8001d8c:	f000 f830 	bl	8001df0 <_getpid_r>
 8001d90:	462a      	mov	r2, r5
 8001d92:	4601      	mov	r1, r0
 8001d94:	4620      	mov	r0, r4
 8001d96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001d9a:	f000 b817 	b.w	8001dcc <_kill_r>
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d00a      	beq.n	8001db8 <_raise_r+0x4c>
 8001da2:	1c59      	adds	r1, r3, #1
 8001da4:	d103      	bne.n	8001dae <_raise_r+0x42>
 8001da6:	2316      	movs	r3, #22
 8001da8:	6003      	str	r3, [r0, #0]
 8001daa:	2001      	movs	r0, #1
 8001dac:	e7e7      	b.n	8001d7e <_raise_r+0x12>
 8001dae:	2400      	movs	r4, #0
 8001db0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8001db4:	4628      	mov	r0, r5
 8001db6:	4798      	blx	r3
 8001db8:	2000      	movs	r0, #0
 8001dba:	e7e0      	b.n	8001d7e <_raise_r+0x12>

08001dbc <raise>:
 8001dbc:	4b02      	ldr	r3, [pc, #8]	; (8001dc8 <raise+0xc>)
 8001dbe:	4601      	mov	r1, r0
 8001dc0:	6818      	ldr	r0, [r3, #0]
 8001dc2:	f7ff bfd3 	b.w	8001d6c <_raise_r>
 8001dc6:	bf00      	nop
 8001dc8:	2000000c 	.word	0x2000000c

08001dcc <_kill_r>:
 8001dcc:	b538      	push	{r3, r4, r5, lr}
 8001dce:	4d07      	ldr	r5, [pc, #28]	; (8001dec <_kill_r+0x20>)
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	4604      	mov	r4, r0
 8001dd4:	4608      	mov	r0, r1
 8001dd6:	4611      	mov	r1, r2
 8001dd8:	602b      	str	r3, [r5, #0]
 8001dda:	f7fe fdff 	bl	80009dc <_kill>
 8001dde:	1c43      	adds	r3, r0, #1
 8001de0:	d102      	bne.n	8001de8 <_kill_r+0x1c>
 8001de2:	682b      	ldr	r3, [r5, #0]
 8001de4:	b103      	cbz	r3, 8001de8 <_kill_r+0x1c>
 8001de6:	6023      	str	r3, [r4, #0]
 8001de8:	bd38      	pop	{r3, r4, r5, pc}
 8001dea:	bf00      	nop
 8001dec:	200000b0 	.word	0x200000b0

08001df0 <_getpid_r>:
 8001df0:	f7fe bdec 	b.w	80009cc <_getpid>

08001df4 <__malloc_lock>:
 8001df4:	4801      	ldr	r0, [pc, #4]	; (8001dfc <__malloc_lock+0x8>)
 8001df6:	f000 b809 	b.w	8001e0c <__retarget_lock_acquire_recursive>
 8001dfa:	bf00      	nop
 8001dfc:	200000b8 	.word	0x200000b8

08001e00 <__malloc_unlock>:
 8001e00:	4801      	ldr	r0, [pc, #4]	; (8001e08 <__malloc_unlock+0x8>)
 8001e02:	f000 b804 	b.w	8001e0e <__retarget_lock_release_recursive>
 8001e06:	bf00      	nop
 8001e08:	200000b8 	.word	0x200000b8

08001e0c <__retarget_lock_acquire_recursive>:
 8001e0c:	4770      	bx	lr

08001e0e <__retarget_lock_release_recursive>:
 8001e0e:	4770      	bx	lr

08001e10 <_init>:
 8001e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e12:	bf00      	nop
 8001e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e16:	bc08      	pop	{r3}
 8001e18:	469e      	mov	lr, r3
 8001e1a:	4770      	bx	lr

08001e1c <_fini>:
 8001e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e1e:	bf00      	nop
 8001e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e22:	bc08      	pop	{r3}
 8001e24:	469e      	mov	lr, r3
 8001e26:	4770      	bx	lr
